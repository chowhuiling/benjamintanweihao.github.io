<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[benjamin.tan]]></title>
  <link href="http://benjamintanweihao.github.io/atom.xml" rel="self"/>
  <link href="http://benjamintanweihao.github.io/"/>
  <updated>2013-06-21T22:17:51+08:00</updated>
  <id>http://benjamintanweihao.github.io/</id>
  <author>
    <name><![CDATA[Benjamin Tan]]></name>
    <email><![CDATA[benjamintanweihao AT gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Meeting Elixir with PeepCode: A Review]]></title>
    <link href="http://benjamintanweihao.github.io/blog/2013/06/21/meeting-elixir-with-peepcode-a-review/"/>
    <updated>2013-06-21T21:24:00+08:00</updated>
    <id>http://benjamintanweihao.github.io/blog/2013/06/21/meeting-elixir-with-peepcode-a-review</id>
    <content type="html"><![CDATA[<p><img src="http://benjamintanweihao.github.io/images/peepcode_elixir.png"></p>

<h2>Disclaimer</h2>

<p>I&rsquo;m not affiliated with PeepCode in anyway &ndash; I just love their products.</p>

<h2>TL;DR</h2>

<p>Get this now. It is about the price of movie ticket (at least in Singapore), for a <a href="https://peepcode.com/products/elixir">limited time</a>!</p>

<h2>What I loved about it?</h2>

<p>If you are not familiar with PeepCode (you are really missing out!), go <a href="https://peepcode.com/">here</a> first, but please come back after that. I&rsquo;ve been a longtime customer of theirs, and when <strong>Meet Elixir</strong> was released just a few days ago, I was probably one of the first to download the screencast.</p>

<h3>Caveat emptor</h3>

<p>You probably won&rsquo;t learn Elixir from this screencast alone. But then, that isn&rsquo;t the point of this particular screencast.</p>

<p>The aim of this screencast is to give a whirlwind tour of Elixir and its features by solving a real-world problem, with none other than the best person to do it &ndash; José Valim.</p>

<h3>José&rsquo;s awesome …</h3>

<p>The screencast is a mix between a Play-by-play (developers are given a task and we get to see how they solve it with tools of their choice, along with their thoughts on their approach) and an introductory video.</p>

<p>Around 10 minutes in, you&rsquo;ll realized that José is an amazing teacher. Concepts are explain in a very clear and crisp fashion. The fact that Geoffrey takes on the role as the newbie and asks newbie questions (I hope he doesn&rsquo;t hold this against me) is a very nice touch, because I probably would have stumbled on those too, and some I would have missed.</p>

<p>What is more amazing to see, however, is how the code seems to fly across the screen when he attempts to solve the task, all the while demonstrating varying techniques and idioms and dispensing pearls of wisdom with respect Elixir&rsquo;s design.</p>

<h3>But José&rsquo;s human too</h3>

<p>Another nice thing about this video is when Jose stumbles onto bugs, syntax errors and the like, and how he overcomes them. Even <em>he</em> has to consult the documentation!</p>

<h2>What I would have wanted to see more of?</h2>

<p>I would have wanted to see how concurrency could solve the task in a much more efficient way. Unfortunately, because the files were so few, the effect wasn&rsquo;t there.</p>

<p>The original video I downloaded had tiny hiccups, where the speech was cut off after then end of every chapter. I&rsquo;m sure they have got it fixed by now.</p>

<h2>Who should get this?</h2>

<p>If you are reading this, you probably should just get it. The screencast nicely captures all the excitement that is surrounding Elixir, and the very cool features it offers. Best of all, you get to see how he recovers from these bugs and the ever so temporary brain blocks and solves the task beautifully.</p>

<h2>Who shouldn&rsquo;t get this?</h2>

<p>1) José Valim</p>

<p>2) Joe Armstrong</p>

<p>3) Rich Hickey</p>

<h3>Conclusion</h3>

<p>This is easily one of my favorite PeepCode screencasts &ndash; It was well worth the wait.</p>

<p>I would very much love to see a follow-up on Elixir, with a deeper dive into its concurrency features.</p>

<p>All things considered, for $9, this is almost a no-brainer.</p>

<p><em>Go learn you an Elixir for Great Good!</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elixir for the Lazy, Impatient and Busy: Part 1 |> Lists and Recursion]]></title>
    <link href="http://benjamintanweihao.github.io/blog/2013/06/13/elixir-for-the-lazy-impatient-and-busy-lists-and-recursion/"/>
    <updated>2013-06-13T23:39:00+08:00</updated>
    <id>http://benjamintanweihao.github.io/blog/2013/06/13/elixir-for-the-lazy-impatient-and-busy-lists-and-recursion</id>
    <content type="html"><![CDATA[<p>Welcome to the first of (hopefully) many series of <em>Elixir for the Lazy, Impatient and Busy</em>!</p>

<p>As you might know, I&rsquo;m <a href="http://benjamintanweihao.github.io/blog/2013/06/08/why-my-next-programming-language-is-elixir/">adopting Elixir as my next language</a>. The following series of blog posts are going to cover the interesting aspects of Elixir as I learn about it.</p>

<h2>You are Lazy, Impatient and Busy</h2>

<blockquote><p>The three chief virtues of a programmer are: Laziness, Impatience and Hubris.
&ndash; Larry Wall</p></blockquote>

<p>Before I begin, I&rsquo;m going to assume the following:</p>

<p>1) You don&rsquo;t have a lot of time on your hands. You don&rsquo;t want to buy a book just to see what Elixir looks like, but yet you are still interested to learn about this awesome programming language.</p>

<p>2) You know how to code.</p>

<p>3) You know how to look up <a href="http://elixir-lang.org/docs/stable/">documentation</a> on your own and how to <a href="http://elixir-lang.org/getting_started/1.html">install</a> Elixir.</p>

<p>There is probably going to be a lot of hand-waving, but I&rsquo;m going to assume that you can probably infer from the context, and make parallels with whatever programming language you are comfortable with.</p>

<p>In cases where there are glaring differences, I would highlight it.</p>

<p>I would encourage you to try out the examples and if you have any better implementations than the one I&rsquo;ve shown, please share them via the comments!</p>

<p>That said, let&rsquo;s dive right into Lists and Recursion.</p>

<hr />

<p>I&rsquo;ll run through a couple of functions selected from Elixir&rsquo;s <a href="http://elixir-lang.org/docs/stable/Enum.html">Enum API</a>, and we shall implement our &ldquo;poor man&rsquo;s&rdquo; version of the following (This means that you will not want to use this for your production code, but I believe it provides enough learning value to get your brain juice flowing.):</p>

<ol>
<li><code>empty?/1</code></li>
<li><code>count/1</code></li>
<li><code>first/1</code></li>
</ol>


<p>Notice the <code>/1</code>? That&rsquo;s the <em>arity</em> of the function &ndash; The number of parameters the function will take.</p>

<p>Today, the examples that we go through will lead up to implementing our very own <code>flatten/1</code> function. Here&rsquo;s how it would work:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="no">List</span><span class="o">.</span><span class="n">flatten</span> <span class="p">[</span><span class="m">1</span><span class="p">,</span> <span class="p">[</span><span class="ss">:a</span><span class="p">,</span> <span class="m">3</span><span class="p">],</span> <span class="p">[[</span><span class="m">4</span><span class="p">],</span> <span class="ss">:b</span><span class="p">]]</span>
</span><span class='line'><span class="c1"># Returns:</span>
</span><span class='line'><span class="p">[</span><span class="m">1</span><span class="p">,</span><span class="ss">:a</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="m">4</span><span class="p">,</span><span class="ss">:b</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Couple of things to notice:</p>

<ol>
<li>Lists can contain more lists &ndash; List-ception.</li>
<li>List need not be homogeneous. <code>:a</code> are atoms, something like symbols in Ruby.</li>
</ol>


<h2>Pattern matching</h2>

<p>Elixir has some very sweet pattern matching capabilities. The most important thing to know about lists is probably this:</p>

<blockquote><p>A non-empty list consists of a head and a tail. The tail is also a list.</p></blockquote>

<p><img src="http://benjamintanweihao.github.io/images/listmonster.png">
(Credits: <a href="http://learnyouahaskell.com/">http://learnyouahaskell.com/</a>)</p>

<h2>Implementing empty?</h2>

<p><code>empty?/1</code> returns true if a list is empty, false otherwise:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="k">defmodule</span> <span class="no">MyList</span> <span class="k">do</span>
</span><span class='line'><span class="k">  def</span> <span class="n">empty?</span><span class="p">([]),</span> <span class="k">do</span><span class="p">:</span> <span class="no">true</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">empty?</span><span class="p">(</span><span class="n">list</span><span class="p">)</span> <span class="ow">when</span> <span class="n">is_list</span><span class="p">(</span><span class="n">list</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'><span class="k">    </span><span class="no">false</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">IO</span><span class="o">.</span><span class="n">puts</span> <span class="no">MyList</span><span class="o">.</span><span class="n">empty?</span> <span class="p">[</span><span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">3</span><span class="p">]</span> <span class="c1"># Returns false</span>
</span><span class='line'><span class="no">IO</span><span class="o">.</span><span class="n">puts</span> <span class="no">MyList</span><span class="o">.</span><span class="n">empty?</span> <span class="p">[]</span>        <span class="c1"># Returns true</span>
</span></code></pre></td></tr></table></div></figure>


<p>Things to notice:</p>

<ol>
<li><p><code>defmodule</code> defines a module. Calling the function defined in the module would therefore be <code>IO.puts MyList.empty? [1, 2, 3]</code>.</p></li>
<li><p>There are 2 definitions of <code>empty?</code>. This is where the pattern matching comes in. A non-empty list like <code>[1, 2, 3]</code> will <em>fail to match</em> the first definition, but would match the second one. An empty list <code>[]</code> will match the first definition and its function body will execute.</p></li>
<li><p>There are 2 different ways to write the function body. One liners have <code>, do:</code>. The other flavor is the <code>do … end</code> block.</p></li>
<li><p><code>when</code> is a <strong>guard clause</strong>. Think of it like a conditional for now. In this example, we make use of <code>is_list(list)</code> to make sure that only lists are accepted as the parameter.</p></li>
</ol>


<p>So what happens if none of the parameters match?</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="p">(</span><span class="m">11</span><span class="p">)</span><span class="o">&gt;</span> <span class="no">MyList</span><span class="o">.</span><span class="n">empty?</span> <span class="ss">:you_mad_bro?</span>
</span><span class='line'><span class="o">**</span> <span class="p">(</span><span class="no">UndefinedFunctionError</span><span class="p">)</span> <span class="n">undefined</span> <span class="ss">function:</span> <span class="no">MyList</span><span class="o">.</span><span class="n">empty?</span><span class="o">/</span><span class="m">1</span>
</span><span class='line'>    <span class="no">MyList</span><span class="o">.</span><span class="n">empty?</span><span class="p">(</span><span class="ss">:you_mad_bro?</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Elixir complains, because it cannot find a match.</p>

<h2>Implementing first/1</h2>

<p><code>first</code> gives us the first element of a (obviously) non-empty list.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="k">defmodule</span> <span class="no">MyList</span> <span class="k">do</span>
</span><span class='line'><span class="k">  def</span> <span class="n">first</span><span class="p">([</span> <span class="n">head</span> <span class="o">|</span> <span class="n">tail</span> <span class="p">]),</span> <span class="k">do</span><span class="p">:</span> <span class="n">head</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">IO</span><span class="o">.</span><span class="n">puts</span> <span class="no">MyList</span><span class="o">.</span><span class="n">first</span><span class="p">([</span> <span class="m">1</span> <span class="p">])</span>            <span class="c1"># Returns 1</span>
</span><span class='line'><span class="no">IO</span><span class="o">.</span><span class="n">puts</span> <span class="no">MyList</span><span class="o">.</span><span class="n">first</span><span class="p">([</span> <span class="m">3</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">5</span><span class="p">,</span> <span class="m">1</span><span class="p">])</span> <span class="c1"># Returns 3</span>
</span></code></pre></td></tr></table></div></figure>


<p>Why does it match <code>[1]</code>? <code>[1]</code> is made of the head <code>1</code>, and the empty list. Therefore, an alternative representation is <code>[ 1 | [] ]</code>.</p>

<p>Note: Notice that the variable <code>tail</code> is not used. In fact, Elixir will complain with <code>variable tail is unused</code>. Replace <code>tail</code> with <code>_tail</code> and we&rsquo;ll be good. This tells Elixir to ignore the variable.</p>

<h2>Implementing count/1</h2>

<p><code>count</code> gives us a peek into how recursion works in Elixir:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="k">defmodule</span> <span class="no">MyList</span> <span class="k">do</span>
</span><span class='line'><span class="k">  def</span> <span class="n">count</span><span class="p">([]),</span> <span class="k">do</span><span class="p">:</span> <span class="m">0</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">count</span><span class="p">([</span> <span class="n">head</span> <span class="o">|</span> <span class="n">tail</span> <span class="p">])</span> <span class="k">do</span>
</span><span class='line'><span class="k">    </span><span class="m">1</span> <span class="o">+</span> <span class="n">count</span><span class="p">(</span><span class="n">tail</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">IO</span><span class="o">.</span><span class="n">puts</span> <span class="no">MyList</span><span class="o">.</span><span class="n">count</span><span class="p">([])</span>
</span><span class='line'><span class="no">IO</span><span class="o">.</span><span class="n">puts</span> <span class="no">MyList</span><span class="o">.</span><span class="n">count</span><span class="p">([</span><span class="m">1</span><span class="p">])</span>
</span><span class='line'><span class="no">IO</span><span class="o">.</span><span class="n">puts</span> <span class="no">MyList</span><span class="o">.</span><span class="n">count</span><span class="p">([</span><span class="m">3</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">5</span><span class="p">,</span> <span class="m">1</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here, we&rsquo;re making use of the pattern matching once again.</p>

<ol>
<li><code>[]</code> matches the first definition, and returns 0 immediately.</li>
<li>A non-empty list would match the second definition.</li>
</ol>


<p>Let&rsquo;s see how the <code>[ head | tail ]</code> helps us out by tracing the recursive steps:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="no">Call</span> <span class="n">count</span> <span class="p">[</span><span class="m">3</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">5</span><span class="p">,</span> <span class="m">1</span><span class="p">]:</span> <span class="n">head</span> <span class="o">=</span> <span class="m">3</span><span class="p">,</span> <span class="n">tail</span> <span class="o">=</span> <span class="p">[</span><span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">5</span><span class="p">,</span> <span class="m">1</span><span class="p">]</span>
</span><span class='line'><span class="err">➥</span> <span class="m">1</span> <span class="o">+</span> <span class="n">count</span> <span class="p">[</span><span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">5</span><span class="p">,</span> <span class="m">1</span><span class="p">]</span>
</span><span class='line'>  <span class="no">Call</span> <span class="n">count</span> <span class="p">[</span><span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">5</span><span class="p">,</span> <span class="m">1</span><span class="p">]:</span> <span class="n">head</span> <span class="o">=</span> <span class="m">1</span><span class="p">,</span> <span class="n">tail</span> <span class="o">=</span> <span class="p">[</span><span class="m">2</span><span class="p">,</span> <span class="m">5</span><span class="p">,</span> <span class="m">1</span><span class="p">]</span>
</span><span class='line'>  <span class="err">➥</span> <span class="m">1</span> <span class="o">+</span> <span class="m">1</span> <span class="o">+</span> <span class="n">count</span> <span class="p">[</span><span class="m">2</span><span class="p">,</span> <span class="m">5</span><span class="p">,</span> <span class="m">1</span><span class="p">]</span>
</span><span class='line'>    <span class="no">Call</span> <span class="n">count</span> <span class="p">[</span><span class="m">2</span><span class="p">,</span> <span class="m">5</span><span class="p">,</span> <span class="m">1</span><span class="p">]:</span> <span class="n">head</span> <span class="o">=</span> <span class="m">2</span><span class="p">,</span> <span class="n">tail</span> <span class="o">=</span> <span class="p">[</span><span class="m">5</span><span class="p">,</span> <span class="m">1</span><span class="p">]</span>
</span><span class='line'>    <span class="err">➥</span> <span class="m">1</span> <span class="o">+</span> <span class="m">1</span> <span class="o">+</span> <span class="m">1</span> <span class="o">+</span> <span class="n">count</span> <span class="p">[</span><span class="m">5</span><span class="p">,</span> <span class="m">1</span><span class="p">]</span>
</span><span class='line'>      <span class="no">Call</span> <span class="n">count</span> <span class="p">[</span><span class="m">5</span><span class="p">,</span> <span class="m">1</span><span class="p">]:</span> <span class="n">head</span> <span class="o">=</span> <span class="m">5</span><span class="p">,</span> <span class="n">tail</span> <span class="o">=</span> <span class="p">[</span><span class="m">1</span><span class="p">]</span>
</span><span class='line'>      <span class="err">➥</span> <span class="m">1</span> <span class="o">+</span> <span class="m">1</span> <span class="o">+</span> <span class="m">1</span> <span class="o">+</span> <span class="n">count</span> <span class="p">[</span><span class="m">5</span><span class="p">,</span> <span class="m">1</span><span class="p">]</span>
</span><span class='line'>        <span class="no">Call</span> <span class="n">count</span> <span class="p">[</span><span class="m">1</span><span class="p">]:</span> <span class="n">head</span> <span class="o">=</span> <span class="m">1</span><span class="p">,</span> <span class="n">tail</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>        <span class="err">➥</span> <span class="m">1</span> <span class="o">+</span> <span class="m">1</span> <span class="o">+</span> <span class="m">1</span> <span class="o">+</span> <span class="m">1</span> <span class="o">+</span> <span class="n">count</span> <span class="p">[</span><span class="m">1</span><span class="p">]</span>
</span><span class='line'>          <span class="no">Call</span> <span class="n">count</span> <span class="p">[]:</span>
</span><span class='line'>          <span class="err">➥</span> <span class="m">1</span> <span class="o">+</span> <span class="m">1</span> <span class="o">+</span> <span class="m">1</span> <span class="o">+</span> <span class="m">1</span> <span class="o">+</span> <span class="m">1</span> <span class="o">+</span> <span class="n">count</span> <span class="p">[]</span>
</span><span class='line'>          <span class="err">➥</span> <span class="m">1</span> <span class="o">+</span> <span class="m">1</span> <span class="o">+</span> <span class="m">1</span> <span class="o">+</span> <span class="m">1</span> <span class="o">+</span> <span class="m">1</span> <span class="o">+</span> <span class="m">0</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Now the fun begins: Implementing flatten/1</h2>

<p><code>flatten</code> should take a list of arbitrarily nested elements such that the resulting elements are all non-lists. The only other thing you&rsquo;ll need is the <code>++</code> operator, which concatenates 2 lists together.</p>

<p>Here&rsquo;s my implementation of <code>flatten/1</code>, which I&rsquo;ll readily admit took me quite a while to figure out:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="k">defmodule</span> <span class="no">MyList</span> <span class="k">do</span>
</span><span class='line'><span class="k">  def</span> <span class="n">flatten</span><span class="p">([]),</span> <span class="k">do</span><span class="p">:</span> <span class="p">[]</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">flatten</span><span class="p">([</span> <span class="n">head</span> <span class="o">|</span> <span class="n">tail</span> <span class="p">])</span> <span class="k">do </span>
</span><span class='line'><span class="k">    </span><span class="n">flatten</span><span class="p">(</span><span class="n">head</span><span class="p">)</span> <span class="o">++</span> <span class="n">flatten</span><span class="p">(</span><span class="n">tail</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">flatten</span><span class="p">(</span><span class="n">head</span><span class="p">),</span> <span class="k">do</span><span class="p">:</span> <span class="p">[</span> <span class="n">head</span> <span class="p">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">IO</span><span class="o">.</span><span class="n">inspect</span> <span class="no">MyList</span><span class="o">.</span><span class="n">flatten</span><span class="p">([</span> <span class="p">[</span><span class="m">1</span><span class="p">],</span> <span class="p">[</span> <span class="m">2</span><span class="p">,</span> <span class="p">[</span><span class="m">3</span><span class="p">]</span> <span class="p">]</span> <span class="p">,</span> <span class="p">[</span><span class="m">4</span><span class="p">]])</span> <span class="c1"># Returns [1,2,3,4]</span>
</span><span class='line'><span class="no">IO</span><span class="o">.</span><span class="n">inspect</span> <span class="no">MyList</span><span class="o">.</span><span class="n">flatten</span><span class="p">([</span> <span class="p">[],</span> <span class="p">[</span> <span class="p">[],</span> <span class="p">[</span><span class="m">3</span><span class="p">]</span> <span class="p">]</span> <span class="p">,</span> <span class="p">[</span><span class="m">4</span><span class="p">]])</span> <span class="c1"># Returns [3,4]</span>
</span></code></pre></td></tr></table></div></figure>


<p>See if you can reason this for yourself. :)</p>

<p>Thanks for reading!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pattern #4 - Adapter]]></title>
    <link href="http://benjamintanweihao.github.io/blog/2013/06/11/pattern-number-4-adapter/"/>
    <updated>2013-06-11T23:43:00+08:00</updated>
    <id>http://benjamintanweihao.github.io/blog/2013/06/11/pattern-number-4-adapter</id>
    <content type="html"><![CDATA[<p><img src="http://benjamintanweihao.github.io/images/adapter.jpg"></p>

<p>(Adapters &ndash; Doing it wrong.)</p>

<p>The <strong>Adapter</strong> pattern is one of those patterns that requires little imagination to figure out what they do.</p>

<p>First off, let&rsquo;s see the definition courtesy of GoF:</p>

<blockquote><p>Convert the interface of a class into another interface clients expect.</p>

<p>Adapter lets classes work together that couldn&rsquo;t otherwise because of incompatible interfaces.</p></blockquote>

<p>Let&rsquo;s see some code:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Client</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">target</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@target</span> <span class="o">=</span> <span class="n">adapter</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">do_work</span>
</span><span class='line'>    <span class="c1"># do hard work …</span>
</span><span class='line'>    <span class="vi">@target</span><span class="o">.</span><span class="n">complex_operation</span>
</span><span class='line'>    <span class="c1"># ...</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Target</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">complex_operation</span>
</span><span class='line'>    <span class="c1"># la la la ...</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here&rsquo;s the story:</p>

<p>Normally the <code>Client</code> would be expecting that the <code>target</code> be able to <code>do_work</code> without a hitch:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">client</span> <span class="o">=</span> <span class="no">Client</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">Target</span><span class="o">.</span><span class="n">new</span><span class="p">)</span>
</span><span class='line'><span class="n">client</span><span class="o">.</span><span class="n">do_work</span>
</span></code></pre></td></tr></table></div></figure>


<p>One fine day, your boss comes over, and shows you this class, and tells you that <code>SomeOtherTarget</code> must work with <code>Client</code>:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">SomeOtherTarget</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">trivial_operation</span>
</span><span class='line'>    <span class="c1"># oh no! different method name…</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Obviously, this won&rsquo;t work, because <code>SomeOtherTarget</code> does not have the <code>complex_operation</code> method that the <code>Client</code> expects:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">client</span> <span class="o">=</span> <span class="no">Client</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">SomeOtherTarget</span><span class="o">.</span><span class="n">new</span><span class="p">)</span>
</span><span class='line'><span class="n">client</span><span class="o">.</span><span class="n">do_work</span> <span class="c1"># DOES NOT WORK</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Plugging in the Adapter</h2>

<p>We need some way to bridge this difference in interfaces. How do we somehow connect <code>Client</code>&rsquo;s expectation of a <code>complex_operation</code> method with <code>SomeOtherTarget</code>&rsquo;s <code>trivial_operation</code> ?</p>

<p>Here&rsquo;s the <code>Adapter</code> class to the rescue:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Adapter</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">adaptee</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@adaptee</span> <span class="o">=</span> <span class="n">adaptee</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">complex_operation</span>
</span><span class='line'>    <span class="vi">@adaptee</span><span class="o">.</span><span class="n">trivial_operation</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And with this bit of indirection, <code>Client</code> can happily use <code>SomeOtherTarget</code>:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">client</span> <span class="o">=</span> <span class="no">Client</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">Adapter</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">SomeOtherTarget</span><span class="o">.</span><span class="n">new</span><span class="p">))</span>
</span><span class='line'><span class="n">client</span><span class="o">.</span><span class="n">do_work</span> <span class="c1"># DOES NOT WORK</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice how now the <code>Adapter</code> object takes the place of the <code>@target</code> instance variable of <code>Client</code>. The <code>Adapter</code> object now becomes the middleman/wrapper/translator. This is composition at work!</p>

<h2>2 Flavors of Adapters: Object &amp; Class</h2>

<p>Now, if you check out the <a href="http://en.wikipedia.org/wiki/Adapter_pattern">Wikipedia entry</a> you will see the 2 kinds of Adapters &ndash; <strong>Class</strong> and <strong>Object</strong> adapters.</p>

<h3>Object Adapter</h3>

<p><img src="http://benjamintanweihao.github.io/images/object_adapter.png">
(Credits: Wikipedia)</p>

<h3>Class Adapter</h3>

<p><img src="http://benjamintanweihao.github.io/images/class_adapter.png">
(Credits: Wikipedia)</p>

<h3>So what&rsquo;s the difference?</h3>

<p>I don&rsquo;t know about you, but when I first saw both UML diagrams, my eyes glazed. The key here to to focus on the differences.</p>

<p>The <strong>Object Adapter</strong> uses <em>composition</em>. Notice that the <code>Adapter</code> has an <code>+adaptee</code> field. The <code>Adapter</code> class has to use the <code>Adaptee</code> class, and that&rsquo;s essentially <a href="http://en.wikipedia.org/wiki/Composition_over_inheritance"><em>composition</em></a>.</p>

<p>The <strong>Class Adapter</strong> uses <em>multiple inheritance</em> (that&rsquo;s the hollow triangular arrows pointing upwards). Frankly, I don&rsquo;t know too much about multiple inheritance, and in general, unless you&rsquo;re a C++ programmer (I&rsquo;m sorry), you probably won&rsquo;t need this.</p>

<p>Conclusion: Stick to the Object Adapter.</p>

<p>In the next post, I will look at the <strong>Proxy</strong> pattern. Thanks for reading!</p>

<h3>References</h3>

<p>Olsen, R. (2008) Design patterns in Ruby. Upper Saddle River, NJ: Addison-Wesley, p.163-174.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why My Next Programming Language is Elixir]]></title>
    <link href="http://benjamintanweihao.github.io/blog/2013/06/08/why-my-next-programming-language-is-elixir/"/>
    <updated>2013-06-08T18:21:00+08:00</updated>
    <id>http://benjamintanweihao.github.io/blog/2013/06/08/why-my-next-programming-language-is-elixir</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://benjamintanweihao.github.io/images/elixir-logo.png"></p>

<p><a href="http://elixir-lang.org/">Elixir</a> is a functional meta-programming aware language built on top of the <a href="http://www.erlang.org/">Erlang</a> VM created by José Valim.</p>

<p>For those who don&rsquo;t know José, he&rsquo;s from Rails core, founder of <a href="http://plataformatec.com.br/">Plataformatec</a> and author of <a href="http://pragprog.com/book/jvrails2/crafting-rails-4-applications">Crafting Rails 4 Applications</a>.</p>

<p>When I first heard of Elixir, I didn&rsquo;t give much thought to it. During that time, I was trying to wrap my feeble head around <a href="http://clojure.org/">Clojure</a>. Then all of a sudden, I noticed a flurry of activity surrounding this up and coming programming language:</p>

<p><a href="https://peepcode.com/pages/upcoming">PeepCode</a> announced that they were filming an episode with José.</p>

<p><a href="http://oreilly.com/">O&#8217;reilly</a> were going to publish an upcoming book and The Pragmatic Bookshelf had just published <a href="http://pragprog.com/book/elixir/programming-elixir">Programming Elixir</a> by Dave Thomas.</p>

<p>Then, there was a blog <a href="http://joearms.github.io/2013/05/31/a-week-with-elixir.html">post</a> by Joe Armstrong, inventor of Erlang, who wrote about his 1-week experience with Elixir. (He is pretty excited about it.)</p>

<h2>Watching the Alpha Geeks</h2>

<p>Tim O&#8217;Reilly has been credited for the above phrase through this <a href="http://www.linuxdevcenter.com/pub/a/mac/2002/05/14/oreilly_wwdc_keynote.html">talk</a>. In it, he mentions that a lot of ideas about what books to publish came from observing other hackers and &ldquo;alpha geeks&rdquo;:</p>

<blockquote><p>This is how we get most of our good ideas at O&#8217;Reilly. We look for people who appear to be doing magic, and ask them how they do it.</p>

<p>There are always people in any field who are the most clued in to the deep trends, who seem to be playing with all the coolest stuff, and seem to have their finger in everything before most people even know about it.</p></blockquote>

<p>Joe, José and Dave certain qualify as &ldquo;alpha geeks&rdquo;, and their interest/investment in Elixir is definitely noteworthy.</p>

<h2>Elixir |> The Love-child of Ruby and Erlang |> Accessible Concurrency</h2>

<p>Elixir definitely has some Ruby feel to it. Here&rsquo;s some code to whet your appetite:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="p">(</span><span class="m">1</span><span class="o">..</span><span class="m">10</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="n">map</span><span class="p">(</span><span class="nv">&amp;1</span><span class="o">*</span><span class="nv">&amp;1</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="n">filter</span><span class="p">(</span><span class="k">fn</span> <span class="n">x</span> <span class="o">-&gt;</span> <span class="n">rem</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="m">2</span><span class="p">)</span> <span class="o">==</span> <span class="m">0</span> <span class="k">end</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>returns <code>[4,16,36,64,100]</code>.</p>

<p>The above code illustrates one of the coolest features yet I&rsquo;ve seen in a programming language: The <code>|&gt;</code> operator. This operator acts very much like the <code>|</code> operator in Unix shells.</p>

<p>Briefly, here is what the code does:</p>

<ol>
<li><code>(1..10)</code> specifies a range from 1 to 10.</li>
<li>This range is fed into the <code>map</code> function.</li>
<li><code>map(&amp;1*&amp;1)</code> is syntactic sugar for: <code>map(fn x -&gt; x * x end)</code>.</li>
<li>The result (<code>[1,4,9,16,25,36,49,64,81,100]</code>) then is fed yet again into the <code>filter</code> function, which only keeps even numbers.</li>
</ol>


<h2>Learning Concurrency: Not Optional Anymore</h2>

<p>Concurrency is getting more and more important &ndash; Hence the sudden excitement over learning all these functional programming languages.</p>

<p>Yes, I could do concurrency in Ruby. There&rsquo;s <a href="https://github.com/celluloid/celluloid">Celluloid</a> for example. But, concurrency isn&rsquo;t something built into Ruby&rsquo;s DNA.</p>

<p>While no one raves about Erlang&rsquo;s syntax, there is little doubt that Erlang can handle concurrency remarkably well. With Elixir, we can have the best of both worlds!</p>

<p>That is yet another reason why I am super excited about Elixir &ndash; Having a pretty syntax wrapped around the powerful Erlang VM seems to be an irresistible combination.</p>

<h2>Learning and Writing about Elixir</h2>

<p><a href="http://pragprog.com/book/elixir/programming-elixir"><img src="http://benjamintanweihao.github.io/images/elixir-book.jpg"></a></p>

<p>I bought the ebook the moment it was released. So far, I&rsquo;m enjoying the book very much, and especially looking forward to the part where concurrency is covered.</p>

<p>I plan to cover aspects of the Elixir language on this blog in the very near future.</p>

<p>Thanks for reading!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pattern #3 - Observer]]></title>
    <link href="http://benjamintanweihao.github.io/blog/2013/06/06/pattern-number-3-observer/"/>
    <updated>2013-06-06T22:58:00+08:00</updated>
    <id>http://benjamintanweihao.github.io/blog/2013/06/06/pattern-number-3-observer</id>
    <content type="html"><![CDATA[<p>Today, we&rsquo;ll look at one of the most useful patterns &ndash; The <strong>Observer</strong>.</p>

<p>This is what the GoF have to say about the Observer:</p>

<blockquote><p>Define a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically.</p></blockquote>

<p>We shall use the UML diagram to help us understand the pattern:</p>

<p><img src="http://benjamintanweihao.github.io/images/observer_uml.png">
(Credits: <a href="http://www.wikipedia.com/">http://www.wikipedia.com/</a>)</p>

<h3>The Subject</h3>

<p>We begin with the <strong>Subject</strong>. This is the object that we are interested in when it&rsquo;s state changes.</p>

<p><strong>Subject</strong> has an <code>observerCollection</code> field. As it&rsquo;s name suggests, this is typically a list collection (Array, List, etc). This stores a collection of <strong>Observer</strong>s which we will take a look next.</p>

<h3>The Observer</h3>

<p>The parent <strong>Observer</strong> defines one method &ndash; <code>notify()</code>. Classes which inherit the <strong>Observer</strong> (<code>ConcreteObserverA</code>, <code>ConcreteObserverB</code>) are expected to implement <code>notify()</code>.</p>

<h3>PUB/SUB</h3>

<p>This pattern is also known as the Publisher/Subscriber, or PUB/SUB for short.</p>

<p><img src="http://benjamintanweihao.github.io/images/pubsub.jpeg"></p>

<p>Let&rsquo;s find out why:</p>

<h3>Subscribing and Unsubscribing</h3>

<p>If the <code>Subject</code> needs to inform certain <code>Observer</code>s, then it calls the <code>registerObserver(observer)</code>. Similarly, once it can choose to remove any <code>Observer</code> by calling <code>unregisterObserver(observer)</code>.</p>

<h3>Publishing</h3>

<p>Here&rsquo;s where the fun starts. Let&rsquo;s see some code that implements the UML diagram above:</p>

<figure class='code'><figcaption><span>The Subject </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Subject</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>    <span class="vi">@observers</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">notify_observers</span>
</span><span class='line'>    <span class="vi">@observers</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">observer</span><span class="o">|</span>
</span><span class='line'>      <span class="n">observer</span><span class="o">.</span><span class="n">notify</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">register_observer</span><span class="p">(</span><span class="n">observer</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@observers</span> <span class="o">&lt;&lt;</span> <span class="n">observer</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">unregister_observer</span><span class="p">(</span><span class="n">observer</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@observers</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="n">observer</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then the Observer:</p>

<figure class='code'><figcaption><span>The Observers </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ObserverOne</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">notify</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Observer 1 called.&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">ObserverTwo</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">notify</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Observer 2 called.&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then we add our observers:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">subject</span> <span class="o">=</span> <span class="no">Subject</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">subject</span><span class="o">.</span><span class="n">register_observer</span><span class="p">(</span><span class="no">ObserverOne</span><span class="o">.</span><span class="n">new</span><span class="p">)</span>
</span><span class='line'><span class="n">subject</span><span class="o">.</span><span class="n">register_observer</span><span class="p">(</span><span class="no">ObserverTwo</span><span class="o">.</span><span class="n">new</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, whenever <code>Subject</code>&rsquo;s state changes, it just has to call <code>notify_observers</code>:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Subject</span>
</span><span class='line'>  <span class="c1"># …  </span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">change_variable</span>
</span><span class='line'>    <span class="c1"># …</span>
</span><span class='line'>    <span class="n">notify_observers</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Key Takeaways</h3>

<p>The Observer pattern great for reducing the coupling between different components when these components need to be informed about changes.</p>

<p>By separating the <code>Subject</code> and the <code>Observer</code>, we have a clean separation of concerns.</p>

<h3>Examples of Observer in use</h3>

<p><a href="http://rubyonrails.org/">Ruby</a> has is very own <code>Observable</code> module, so there&rsquo;s really no need to implement one your own. See the <a href="http://www.ruby-doc.org/stdlib-2.0/libdoc/observer/rdoc/Observable.html">documentation</a>. Notice that the methods implemented are pretty similar.</p>

<p><a href="http://rubyonrails.org/">Rails</a> makes use of observers heavily. Here&rsquo;s a typical example:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">after_create</span> <span class="ss">:send_email</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">send_email</span>
</span><span class='line'>    <span class="c1">#send a welcome email</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Thanks for reading!</p>

<h3>References</h3>

<p>Olsen, R. (2008) Design patterns in Ruby. Upper Saddle River, NJ: Addison-Wesley, p.95-110.</p>

<p>Gamma, E. (1995) Design patterns. Reading, Mass.: Addison-Wesley, p.293-303.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pattern #2: Strategy]]></title>
    <link href="http://benjamintanweihao.github.io/blog/2013/06/02/pattern-number-2-strategy/"/>
    <updated>2013-06-02T13:48:00+08:00</updated>
    <id>http://benjamintanweihao.github.io/blog/2013/06/02/pattern-number-2-strategy</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://benjamintanweihao.github.io/images/delegate.png">
(Credits: <a href="http://www.indigoexcel.com/">http://www.indigoexcel.com/</a>)</p>

<p><strong>Strategy</strong> is a simple, yet powerful, design pattern to have in your toolbox. It&rsquo;s main power comes from its clever use of delegation. Here&rsquo;s the GoF definition:</p>

<blockquote><p>Define a family of algorithms, encapsulate each one, and make them interchangeable.
Strategy lets the algorithm vary independently from client that use it.</p></blockquote>

<p>Let&rsquo;s assume the following:</p>

<p>You have just written an backup utility that is beloved by sysadmins all over the world.</p>

<p>So far, your most requested feature is to support multiple forms of notifications. Currently, the user is only notified via standard output (i.e. Log file).</p>

<p>You want to support multiple notifications, but yet, you are too <em>busy/lazy</em> to support the multitudes of notification methods (e.g.: Twitter/IRC/XMPP/etc).</p>

<p>So how? Here&rsquo;s where <strong>Strategy</strong> comes to the rescue.</p>

<p>In this example, there are 3 classes:</p>

<ol>
<li><p><code>Context</code>: Think of this as the client class. This is the class that is going to make use of the pattern. In the previous example, this could be the <code>BackupUtility</code> class.</p></li>
<li><p><code>EmailNotifier</code>/<code>TwitterNotifier</code>: These classes represent the different notifiers we want to use.</p></li>
</ol>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Context</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">notifier</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@notifier</span> <span class="o">=</span> <span class="n">notifier</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">notify</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@notifier</span><span class="o">.</span><span class="n">notify</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">EmailNotifier</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">opts</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@user_name</span>   <span class="o">=</span> <span class="n">opts</span><span class="o">[</span><span class="ss">:user_name</span><span class="o">]</span>
</span><span class='line'>    <span class="vi">@password</span>    <span class="o">=</span> <span class="n">opts</span><span class="o">[</span><span class="ss">:password</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">notify</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'>    <span class="no">GoogleMailer</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">TwitterNotifier</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">opts</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@handle</span> <span class="o">=</span> <span class="n">opts</span><span class="o">[</span><span class="ss">:handle</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">notify</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'>    <span class="ss">Twitter</span><span class="p">:</span><span class="ss">:Client</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">tweet</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">message</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="vi">@handle</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>So now, if we want to send notifications via email:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">context</span> <span class="o">=</span> <span class="no">Context</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">EmailNotifier</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">username</span><span class="p">:</span> <span class="s1">&#39;ben@gmail.com&#39;</span><span class="p">,</span> <span class="ss">password</span><span class="p">:</span> <span class="s1">&#39;secretlol&#39;</span><span class="p">))</span>
</span><span class='line'><span class="n">context</span><span class="o">.</span><span class="n">notify</span><span class="p">(</span><span class="s1">&#39;Backup completed successfully!&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>And if we want Twitter notifications instead:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">context</span><span class="o">.</span><span class="n">notifier</span> <span class="o">=</span> <span class="no">TwitterNotifier</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">handle</span><span class="p">:</span> <span class="s1">&#39;@bentanweihao&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">context</span><span class="o">.</span><span class="n">notify</span><span class="p">(</span><span class="s1">&#39;Catastrophic disaster! Prepare for a long night.&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, the beautiful thing about the Strategy is that anyone can write custom notifications.</p>

<p>All the implementation has to do is to implement the <code>notify</code> method, and then set the <code>notifier</code> attribute of the <code>Context</code> class to the new notifier.</p>

<h2>Delegate, Delegate, Delegate</h2>

<p>Delegation is at the heart of the strategy pattern. Most of its magic derives from the deceptively simple <code>notify</code> method in the <code>Context</code> class:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">notify</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'>  <span class="vi">@notifier</span><span class="o">.</span><span class="n">notify</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>Context</code> class doesn&rsquo;t care how the <code>notifier</code> is implemented. It just calls the <code>notify</code> method with the correct set of parameters.</p>

<h2>Open/Close Principle</h2>

<p><strong>Strategy</strong> is an example of the <a href="http://en.wikipedia.org/wiki/Open/closed_principle">Open/Closed principle</a>.</p>

<p>The essence of it is:</p>

<blockquote><p>Software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification.</p></blockquote>

<p>Imagine for a moment that our <code>Context</code> class is compiled and distributed only in binary form. No one else can modify the code except (closed of modification) yourself. How can you then allow others to create extensions to your code?</p>

<p>If you have understood <strong>Strategy</strong>, this would be a non-issue since you just have to implement the correct interface, assign the correct attributes and you&rsquo;ll be all set.</p>

<h2>Strategy vs. Template Method</h2>

<ul>
<li><p>Unlike <strong>Template method</strong>, <strong>Strategy</strong> doesn&rsquo;t require inheritance.</p></li>
<li><p><strong>Template method</strong> modifies <em>part</em> of the algorithm, while <strong>Strategy</strong> swaps out the entire algorithm with a new one.</p></li>
</ul>


<p>In the next post, I&rsquo;ll cover an extremely useful and common pattern &ndash; <strong>Observer</strong>.</p>

<p>Thanks for reading!</p>

<h3>References</h3>

<p>Olsen, R. (2008) Design patterns in Ruby. Upper Saddle River, NJ: Addison-Wesley, p.77-93.</p>

<p>Gamma, E. (1995) Design patterns. Reading, Mass.: Addison-Wesley, p.315-323.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pattern #1: Template Method]]></title>
    <link href="http://benjamintanweihao.github.io/blog/2013/05/29/pattern-number-1-template-method/"/>
    <updated>2013-05-29T10:04:00+08:00</updated>
    <id>http://benjamintanweihao.github.io/blog/2013/05/29/pattern-number-1-template-method</id>
    <content type="html"><![CDATA[<p>This is one of the simplest design patterns. The GoF book has the most concise description of the <strong>Template Method</strong>:</p>

<blockquote><p>Define the <em>skeleton of an algorithm</em> in an operation, deferring some steps to subclasses.</p>

<p>Template Method lets <em>subclasses redefine certain steps of an algorithm without changing the algorithms&rsquo;s structure</em>.</p></blockquote>

<p>First, notice the use of &ldquo;<strong>subclasses</strong>&rdquo; and it should be obvious that this pattern makes use of inheritance heavily.</p>

<p>Let&rsquo;s tease apart the description.</p>

<h3>Define the <em>skeleton of an algorithm</em> in an operation, deferring some steps to subclasses</h3>

<p>Chances are, if you&rsquo;re doing any amount of Java, you probably have used the template method.</p>

<p>Here, we are extending the <a href="http://docs.oracle.com/javase/6/docs/api/java/util/AbstractList.html">AbstractList</a> class. <code>AbstractList</code> already gives us most of the implementation to build a <code>List</code> that is supported by an array-like data store.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.util.AbstractList</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SuperAwesomeList</span> <span class="kd">extends</span> <span class="n">AbstractList</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Object</span> <span class="nf">get</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">size</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, the programmer can use her creative genius to implement <code>get(i)</code> and <code>size()</code>.</p>

<h3>Template Method lets <em>subclasses redefine certain steps of an algorithm without changing the algorithms&rsquo;s structure</em>.</h3>

<p>Here&rsquo;s another flavor of the Template Method in Ruby:
<a href="http://mperham.github.io/sidekiq/">Sidekiq</a> is a message processor for Ruby.</p>

<p>It is mostly used for pushing long-running jobs into the background (e.g.: sending emails, complex calculations, etc.)</p>

<p>Here, we have <code>HardWorker</code>, who&rsquo;s sole purpose is to crawl Wikipedia. We would like to put this in the background. Happily, to create a background worker using Sidekiq is almost trivial:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">HardWorker</span>
</span><span class='line'>  <span class="kp">include</span> <span class="ss">Sidekiq</span><span class="p">:</span><span class="ss">:Worker</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">perform</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
</span><span class='line'>    <span class="n">crawler</span> <span class="o">=</span> <span class="no">Crawler</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
</span><span class='line'>    <span class="n">crawler</span><span class="o">.</span><span class="n">crawl</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Run our worker!</span>
</span><span class='line'><span class="no">HardWorker</span><span class="o">.</span><span class="n">perform_async</span><span class="p">(</span><span class="s1">&#39;http://www.wikipedia.com&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The secret sauce is on line 2. Roughly, when you call <code>perform_async</code>, the <strong>job processor</strong> is notified, which then runs the <code>perform</code> method of the worker.</p>

<p>Here&rsquo;s the condensed code snippet of the job processor calling the <code>perform</code> method of the worker:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Lots of code removed.</span>
</span><span class='line'><span class="k">module</span> <span class="nn">Sidekiq</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Processor</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">process</span>
</span><span class='line'>      <span class="c1">##########################</span>
</span><span class='line'>      <span class="c1"># Lots of complicated code</span>
</span><span class='line'>      <span class="c1">##########################</span>
</span><span class='line'>
</span><span class='line'>      <span class="no">Sidekiq</span><span class="o">.</span><span class="n">server_middleware</span><span class="o">.</span><span class="n">invoke</span><span class="p">(</span><span class="n">worker</span><span class="p">,</span> <span class="n">msg</span><span class="p">,</span> <span class="n">queue</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">worker</span><span class="o">.</span><span class="n">perform</span><span class="p">(</span><span class="n">msg</span><span class="p">)</span> <span class="c1"># &lt;- Workers implement this anyway they like!</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">##########################</span>
</span><span class='line'>      <span class="c1"># Even more Ruby magic …</span>
</span><span class='line'>      <span class="c1">##########################</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now would be a good time to introduce &hellip;</p>

<h3>The Hollywood Principle &ndash; Don&rsquo;t call us, we&rsquo;ll call you</h3>

<p><img src="http://benjamintanweihao.github.io/images/template_hollywood.png" title="image" alt="images"></p>

<p>Look at the <code>process</code> method of <code>Sidekiq::Processor</code> again.</p>

<p>Every worker <em>must</em> include the <code>Sidekiq::Worker</code> module and <em>must</em> implement <code>perform</code> method.</p>

<p>The template method embodies the Hollywood principle nicely:</p>

<p><code>Sidekiq::Processor</code> <em>doesn&rsquo;t care</em> how any of the workers&#8217; <code>perform</code> method works &ndash; It just calls it.</p>

<p>Every <code>Sidekiq::Worker</code> class implements its own unique <code>perform</code> method. This allows for flexibility without messing with the main algorithm of the <code>process</code> method.</p>

<h3>Keypoints: When to use the Template Pattern?</h3>

<ul>
<li>you want to control the amount of subclassing (First example)</li>
<li>the behavior of your algorithm varies, and subclasses are required to provide their own implementation (Second Example)</li>
<li>you want only specific points where the algorithm should vary (Second Example)</li>
</ul>


<p>The next pattern I would like to cover is the <strong>Strategy Pattern</strong>, a close cousin of the Template pattern.</p>

<p>Thanks for reading!</p>

<h3>References</h3>

<p>Olsen, R. (2008) Design patterns in Ruby. Upper Saddle River, NJ: Addison-Wesley, p.59-76.</p>

<p>Gamma, E. (1995) Design patterns. Reading, Mass.: Addison-Wesley, p.325-330.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Little Experiment]]></title>
    <link href="http://benjamintanweihao.github.io/blog/2013/05/27/my-little-experiment/"/>
    <updated>2013-05-27T01:14:00+08:00</updated>
    <id>http://benjamintanweihao.github.io/blog/2013/05/27/my-little-experiment</id>
    <content type="html"><![CDATA[<h3>Fear Driven Learning</h3>

<p>Recently, I brought up something that has been bothering me recently to a couple of my friends. I told them of a new term that I coined &ndash; <strong>&ldquo;Fear Driven Learning&rdquo;</strong> &ndash; Using fear as the primary motivating factor to learn. While some might balk at associating learning with something so seemingly negative, hear me out first.</p>

<p>I am a Software Engineer. Or at least that is what I like to tell people I am. Deep down, I&rsquo;m not so sure. I suspect this is the case with many of my friends who consider themselves as software engineers, whether defined by their ego, degree, or profession. I do not know half of what&rsquo;s covered in the <em>Design Pattern&rsquo;s</em> book, nor I am familiar with most of what&rsquo;s in <em>Refactoring</em>. I don&rsquo;t test all of my code. I am not sure how long I can keep up with this pretense. So, I am afraid.</p>

<p>I am a Computer Science graduate. Or at least that is what my degree scroll says. Deep down, I&rsquo;m not so sure. Sure, I consider myself a fairly good programmer. And I probably could still know my way around the Prolog compiler I wrote many moons ago. I still struggle with understanding concurrency, never implemented a bloom filter, and would probably struggle with any interview questions that would involve slightly more than trivial algorithms. So, again, I am afraid.</p>

<p>I have a great job that I look forward to everyday. I am privileged to be able to have the freedom to solve problems in anyway I deem fit. But I should not get too comfortable. Great things don&rsquo;t last, and no one is indispensable. That is something I am afraid of.</p>

<h3>Exploiting Fear</h3>

<p>I want to let this feeling of <em>fear</em> work to my advantage. This is where this blog comes in.</p>

<p>Here&rsquo;s the plan:</p>

<pre><code>1) Pick a book.
2) Write a summary of the what I've learnt, whether by chapter/section.
3) Do this twice/thrice per week.
</code></pre>

<p>So, what&rsquo;s in it for you, <em>Dear Reader</em>? Hopefully, I managed to scare you, at least a tiny bit. But I also hope that this somehow managed to kickstart your desire for self-improvement in your chosen craft. If that&rsquo;s the case, congratulations! and welcome aboard!.</p>

<p>I aim to condense the absolute essentials of what I&rsquo;ve read and learned (these two activities are mutually exclusive) into a single blog post, in the hope that I have filled my and your gaps.</p>

<p>I have always tried to look for a site where the reader would post his/her learnings per chapter, instead of just reviews. But seems like I just have to implement that myself.</p>

<h3>In the Next Post &hellip;</h3>

<p>The first pick is <a href="http://www.amazon.com/gp/product/0321490452/ref=as_li_qf_sp_asin_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0321490452&amp;linkCode=as2&amp;tag=benjamintan-20"><strong>Design Patterns in Ruby</strong></a>. This book is much more readable that the original <a href="http://www.amazon.com/gp/product/0201633612/ref=as_li_qf_sp_asin_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0201633612&amp;linkCode=as2&amp;tag=benjamintan-20">GoF Design Patterns</a> book, as the book title suggests, its in <em>Ruby</em> (GoF&rsquo;s examples are in C++). This book has been lying on my shelf for the longest time. It&rsquo;s time to put the book into good use.</p>

<p><img src="https://skitch-img.s3.amazonaws.com/20120628-p6e2j4pg3dd44p7wc7ut11x14r.png" alt="Design Patterns in Ruby" />.</p>

<p>Stay tuned!</p>
]]></content>
  </entry>
  
</feed>
