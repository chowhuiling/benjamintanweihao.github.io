<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Lists | benjamin.tan]]></title>
  <link href="http://benjamintanweihao.github.io/blog/categories/lists/atom.xml" rel="self"/>
  <link href="http://benjamintanweihao.github.io/"/>
  <updated>2013-06-14T01:44:31+08:00</updated>
  <id>http://benjamintanweihao.github.io/</id>
  <author>
    <name><![CDATA[Benjamin Tan]]></name>
    <email><![CDATA[benjamintanweihao AT gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Elixir for the Lazy, Impatient and Busy: Part 1 |> Lists and Recursion]]></title>
    <link href="http://benjamintanweihao.github.io/blog/2013/06/13/elixir-for-the-lazy-impatient-and-busy-lists-and-recursion/"/>
    <updated>2013-06-13T23:39:00+08:00</updated>
    <id>http://benjamintanweihao.github.io/blog/2013/06/13/elixir-for-the-lazy-impatient-and-busy-lists-and-recursion</id>
    <content type="html"><![CDATA[<p>Welcome to the first of (hopefully) many series of <em>Elixir for the Lazy, Impatient and Busy</em>!</p>

<p>As you might know, I&rsquo;m <a href="/blog/2013/06/08/why-my-next-programming-language-is-elixir/">adopting Elixir as my next language</a>. The following series of blog posts are going to cover the interesting aspects of Elixir as I learn about it.</p>

<h2>You are Lazy, Impatient and Busy</h2>

<blockquote><p>The three chief virtues of a programmer are: Laziness, Impatience and Hubris.
&ndash; Larry Wall</p></blockquote>

<p>Before I begin, I&rsquo;m going to assume the following:</p>

<p>1) You don&rsquo;t have a lot of time on your hands. You don&rsquo;t want to buy a book just to see what Elixir looks like, but yet you are still interested to learn about this awesome programming language.</p>

<p>2) You know how to code.</p>

<p>3) You know how to look up <a href="http://elixir-lang.org/docs/stable/">documentation</a> on your own and how to <a href="http://elixir-lang.org/getting_started/1.html">install</a> Elixir.</p>

<p>There is probably going to be a lot of hand-waving, but I&rsquo;m going to assume that you can probably infer from the context, and make parallels with whatever programming language you are comfortable with.</p>

<p>In cases where there are glaring differences, I would highlight it.</p>

<p>I would encourage you to try out the examples and if you have any better implementations than the one I&rsquo;ve shown, please share them via the comments!</p>

<p>That said, let&rsquo;s dive right into Lists and Recursion.</p>

<hr />

<p>I&rsquo;ll run through a couple of functions selected from Elixir&rsquo;s <a href="http://elixir-lang.org/docs/stable/Enum.html">Enum API</a>, and we shall implement our &ldquo;poor man&rsquo;s&rdquo; version of the following (This means that you will not want to use this for your production code, but I believe it provides enough learning value to get your brain juice flowing.):</p>

<ol>
<li><code>empty?/1</code></li>
<li><code>count/1</code></li>
<li><code>first/1</code></li>
</ol>


<p>Notice the <code>/1</code>? That&rsquo;s the <em>arity</em> of the function &ndash; The number of parameters the function will take.</p>

<p>Today, the examples that we go through will lead up to implementing our very own <code>flatten/1</code> function. Here&rsquo;s how it would work:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="no">List</span><span class="o">.</span><span class="n">flatten</span> <span class="p">[</span><span class="m">1</span><span class="p">,</span> <span class="p">[</span><span class="ss">:a</span><span class="p">,</span> <span class="m">3</span><span class="p">],</span> <span class="p">[[</span><span class="m">4</span><span class="p">],</span> <span class="ss">:b</span><span class="p">]]</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="ss">Returns:</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">[</span><span class="m">1</span><span class="p">,</span><span class="ss">:a</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="m">4</span><span class="p">,</span><span class="ss">:b</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Couple of things to notice:</p>

<ol>
<li>Lists can contain more lists &ndash; List-ception.</li>
<li>List need not be homogeneous. <code>:a</code> are atoms, something like symbols in Ruby.</li>
</ol>


<h2>Pattern matching</h2>

<p>Elixir has some very sweet pattern matching capabilities. The most important thing to know about lists is probably this:</p>

<blockquote><p>A non-empty list consists of a head and a tail. The tail is also a list.</p></blockquote>

<p><img src="/images/listmonster.png">
(Credits: <a href="http://learnyouahaskell.com/">http://learnyouahaskell.com/</a>)</p>

<h2>Implementing empty?</h2>

<p><code>empty?/1</code> returns true if a list is empty, false otherwise:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="k">defmodule</span> <span class="no">MyList</span> <span class="k">do</span>
</span><span class='line'><span class="k">  def</span> <span class="n">empty?</span><span class="p">([]),</span> <span class="k">do</span><span class="p">:</span> <span class="no">true</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">empty?</span><span class="p">(</span><span class="n">list</span><span class="p">)</span> <span class="ow">when</span> <span class="n">is_list</span><span class="p">(</span><span class="n">list</span><span class="p">)</span> <span class="k">do</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="err">&gt;</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="no">false</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="err">&gt;</span><span class="o">&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="no">IO</span><span class="o">.</span><span class="n">puts</span> <span class="no">MyList</span><span class="o">.</span><span class="n">empty?</span> <span class="p">[</span><span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">3</span><span class="p">]</span> <span class="c1"># Returns false</span>
</span><span class='line'><span class="no">IO</span><span class="o">.</span><span class="n">puts</span> <span class="no">MyList</span><span class="o">.</span><span class="n">empty?</span> <span class="p">[]</span>        <span class="c1"># Returns true</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Things to notice:</p>

<ol>
<li><p><code>defmodule</code> defines a module. Calling the function defined in the module would therefore be <code>IO.puts MyList.empty? [1, 2, 3]</code>.</p></li>
<li><p>There are 2 definitions of <code>empty?</code>. This is where the pattern matching comes in. A non-empty list like <code>[1, 2, 3]</code> will <em>fail to match</em> the first definition, but would match the second one. An empty list <code>[]</code> will match the first definition and its function body will execute.</p></li>
<li><p>There are 2 different ways to write the function body. One liners have <code>, do:</code>. The other flavor is the <code>do â€¦ end</code> block.</p></li>
<li><p><code>when</code> is a <strong>guard clause</strong>. Think of it like a conditional for now. In this example, we make use of <code>is_list(list)</code> to make sure that only lists are accepted as the parameter.</p></li>
</ol>


<p>So what happens if none of the parameters match?
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">iex</span><span class="p">(</span><span class="m">11</span><span class="p">)</span><span class="o">&gt;</span> <span class="no">MyList</span><span class="o">.</span><span class="n">empty?</span> <span class="ss">:you_mad_bro?</span>
</span><span class='line'><span class="o">**</span> <span class="p">(</span><span class="no">UndefinedFunctionError</span><span class="p">)</span> <span class="n">undefined</span> <span class="ss">function:</span> <span class="no">MyList</span><span class="o">.</span><span class="n">empty?</span><span class="o">/</span><span class="m">1</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="err">&gt;</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="no">MyList</span><span class="o">.</span><span class="n">empty?</span><span class="p">(</span><span class="ss">:you_mad_bro?</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="err">&gt;</span><span class="o">&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Elixir complains, because it cannot find a match.</p>

<h2>Implementing first/1</h2>

<p><code>first</code> gives us the first element of a (obviously) non-empty list.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="k">defmodule</span> <span class="no">MyList</span> <span class="k">do</span>
</span><span class='line'><span class="k">  def</span> <span class="n">first</span><span class="p">([</span> <span class="n">head</span> <span class="o">|</span> <span class="n">tail</span> <span class="p">]),</span> <span class="k">do</span><span class="p">:</span> <span class="n">head</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="no">IO</span><span class="o">.</span><span class="n">puts</span> <span class="no">MyList</span><span class="o">.</span><span class="n">first</span><span class="p">([</span> <span class="m">1</span> <span class="p">])</span>            <span class="c1"># Returns 1</span>
</span><span class='line'><span class="no">IO</span><span class="o">.</span><span class="n">puts</span> <span class="no">MyList</span><span class="o">.</span><span class="n">first</span><span class="p">([</span> <span class="m">3</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">5</span><span class="p">,</span> <span class="m">1</span><span class="p">])</span> <span class="c1"># Returns 3</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Why does it match <code>[1]</code>? <code>[1]</code> is made of the head <code>1</code>, and the empty list. Therefore, an alternative representation is <code>[ 1 | [] ]</code>.</p>

<p>Note: Notice that the variable <code>tail</code> is not used. In fact, Elixir will complain with <code>variable tail is unused</code>. Replace <code>tail</code> with <code>_tail</code> and we&rsquo;ll be good. This tells Elixir to ignore the variable.</p>

<h2>Implementing count/1</h2>

<p><code>count</code> gives us a peek into how recursion works in Elixir:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="k">defmodule</span> <span class="no">MyList</span> <span class="k">do</span>
</span><span class='line'><span class="k">  def</span> <span class="n">count</span><span class="p">([]),</span> <span class="k">do</span><span class="p">:</span> <span class="m">0</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">count</span><span class="p">([</span> <span class="n">head</span> <span class="o">|</span> <span class="n">tail</span> <span class="p">])</span> <span class="k">do</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="err">&gt;</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="m">1</span> <span class="o">+</span> <span class="n">count</span><span class="p">(</span><span class="n">tail</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="err">&gt;</span><span class="o">&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="no">IO</span><span class="o">.</span><span class="n">puts</span> <span class="no">MyList</span><span class="o">.</span><span class="n">count</span><span class="p">([])</span>
</span><span class='line'><span class="no">IO</span><span class="o">.</span><span class="n">puts</span> <span class="no">MyList</span><span class="o">.</span><span class="n">count</span><span class="p">([</span><span class="m">1</span><span class="p">])</span>
</span><span class='line'><span class="no">IO</span><span class="o">.</span><span class="n">puts</span> <span class="no">MyList</span><span class="o">.</span><span class="n">count</span><span class="p">([</span><span class="m">3</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">5</span><span class="p">,</span> <span class="m">1</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Here, we&rsquo;re making use of the pattern matching once again.</p>

<ol>
<li><code>[]</code> matches the first definition, and returns 0 immediately.</li>
<li>A non-empty list would match the second definition.</li>
</ol>


<p>Let&rsquo;s see how the <code>[ head | tail ]</code> helps us out by tracing the recursive steps:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="no">Call</span> <span class="n">count</span> <span class="p">[</span><span class="m">3</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">5</span><span class="p">,</span> <span class="m">1</span><span class="p">]:</span> <span class="n">head</span> <span class="o">=</span> <span class="m">3</span><span class="p">,</span> <span class="n">tail</span> <span class="o">=</span> <span class="p">[</span><span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">5</span><span class="p">,</span> <span class="m">1</span><span class="p">]</span>
</span><span class='line'><span class="err">âž¥</span> <span class="m">1</span> <span class="o">+</span> <span class="n">count</span> <span class="p">[</span><span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">5</span><span class="p">,</span> <span class="m">1</span><span class="p">]</span>
</span><span class='line'>  <span class="no">Call</span> <span class="n">count</span> <span class="p">[</span><span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">5</span><span class="p">,</span> <span class="m">1</span><span class="p">]:</span> <span class="n">head</span> <span class="o">=</span> <span class="m">1</span><span class="p">,</span> <span class="n">tail</span> <span class="o">=</span> <span class="p">[</span><span class="m">2</span><span class="p">,</span> <span class="m">5</span><span class="p">,</span> <span class="m">1</span><span class="p">]</span>
</span><span class='line'>  <span class="err">âž¥</span> <span class="m">1</span> <span class="o">+</span> <span class="m">1</span> <span class="o">+</span> <span class="n">count</span> <span class="p">[</span><span class="m">2</span><span class="p">,</span> <span class="m">5</span><span class="p">,</span> <span class="m">1</span><span class="p">]</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="err">&gt;</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="no">Call</span> <span class="n">count</span> <span class="p">[</span><span class="m">2</span><span class="p">,</span> <span class="m">5</span><span class="p">,</span> <span class="m">1</span><span class="p">]:</span> <span class="n">head</span> <span class="o">=</span> <span class="m">2</span><span class="p">,</span> <span class="n">tail</span> <span class="o">=</span> <span class="p">[</span><span class="m">5</span><span class="p">,</span> <span class="m">1</span><span class="p">]</span>
</span><span class='line'><span class="err">âž¥</span> <span class="m">1</span> <span class="o">+</span> <span class="m">1</span> <span class="o">+</span> <span class="m">1</span> <span class="o">+</span> <span class="n">count</span> <span class="p">[</span><span class="m">5</span><span class="p">,</span> <span class="m">1</span><span class="p">]</span>
</span><span class='line'>  <span class="no">Call</span> <span class="n">count</span> <span class="p">[</span><span class="m">5</span><span class="p">,</span> <span class="m">1</span><span class="p">]:</span> <span class="n">head</span> <span class="o">=</span> <span class="m">5</span><span class="p">,</span> <span class="n">tail</span> <span class="o">=</span> <span class="p">[</span><span class="m">1</span><span class="p">]</span>
</span><span class='line'>  <span class="err">âž¥</span> <span class="m">1</span> <span class="o">+</span> <span class="m">1</span> <span class="o">+</span> <span class="m">1</span> <span class="o">+</span> <span class="n">count</span> <span class="p">[</span><span class="m">5</span><span class="p">,</span> <span class="m">1</span><span class="p">]</span>
</span><span class='line'>    <span class="no">Call</span> <span class="n">count</span> <span class="p">[</span><span class="m">1</span><span class="p">]:</span> <span class="n">head</span> <span class="o">=</span> <span class="m">1</span><span class="p">,</span> <span class="n">tail</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="err">âž¥</span> <span class="m">1</span> <span class="o">+</span> <span class="m">1</span> <span class="o">+</span> <span class="m">1</span> <span class="o">+</span> <span class="m">1</span> <span class="o">+</span> <span class="n">count</span> <span class="p">[</span><span class="m">1</span><span class="p">]</span>
</span><span class='line'>      <span class="no">Call</span> <span class="n">count</span> <span class="p">[]:</span>
</span><span class='line'>      <span class="err">âž¥</span> <span class="m">1</span> <span class="o">+</span> <span class="m">1</span> <span class="o">+</span> <span class="m">1</span> <span class="o">+</span> <span class="m">1</span> <span class="o">+</span> <span class="m">1</span> <span class="o">+</span> <span class="n">count</span> <span class="p">[]</span>
</span><span class='line'>      <span class="err">âž¥</span> <span class="m">1</span> <span class="o">+</span> <span class="m">1</span> <span class="o">+</span> <span class="m">1</span> <span class="o">+</span> <span class="m">1</span> <span class="o">+</span> <span class="m">1</span> <span class="o">+</span> <span class="m">0</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="err">&gt;</span><span class="o">&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Now the fun begins: Implementing flatten/1</h2>

<p><code>flatten</code> should take a list of arbitrarily nested elements such that the resulting elements are all non-lists. The only other thing you&rsquo;ll need is the <code>++</code> operator, which concatenates 2 lists together.</p>

<p>Here&rsquo;s my implementation of <code>flatten/1</code>, which I&rsquo;ll readily admit took me quite a while to figure out:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="k">defmodule</span> <span class="no">MyList</span> <span class="k">do</span>
</span><span class='line'><span class="k">  def</span> <span class="n">flatten</span><span class="p">([]),</span> <span class="k">do</span><span class="p">:</span> <span class="p">[]</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="n">flatten</span><span class="p">([</span> <span class="n">head</span> <span class="o">|</span> <span class="n">tail</span> <span class="p">])</span> <span class="k">do</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="err">&gt;</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">flatten</span><span class="p">(</span><span class="n">head</span><span class="p">)</span> <span class="o">++</span> <span class="n">flatten</span><span class="p">(</span><span class="n">tail</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="err">&gt;</span><span class="o">&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="n">flatten</span><span class="p">(</span><span class="n">head</span><span class="p">),</span> <span class="k">do</span><span class="p">:</span> <span class="p">[</span> <span class="n">head</span> <span class="p">]</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="no">IO</span><span class="o">.</span><span class="n">inspect</span> <span class="no">MyList</span><span class="o">.</span><span class="n">flatten</span><span class="p">([</span> <span class="p">[</span><span class="m">1</span><span class="p">],</span> <span class="p">[</span> <span class="m">2</span><span class="p">,</span> <span class="p">[</span><span class="m">3</span><span class="p">]</span> <span class="p">]</span> <span class="p">,</span> <span class="p">[</span><span class="m">4</span><span class="p">]])</span> <span class="c1"># Returns [1,2,3,4]</span>
</span><span class='line'><span class="no">IO</span><span class="o">.</span><span class="n">inspect</span> <span class="no">MyList</span><span class="o">.</span><span class="n">flatten</span><span class="p">([</span> <span class="p">[],</span> <span class="p">[</span> <span class="p">[],</span> <span class="p">[</span><span class="m">3</span><span class="p">]</span> <span class="p">]</span> <span class="p">,</span> <span class="p">[</span><span class="m">4</span><span class="p">]])</span> <span class="c1"># Returns [3,4]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>See if you can reason this for yourself. :)</p>

<p>Thanks for reading!</p>
]]></content>
  </entry>
  
</feed>
