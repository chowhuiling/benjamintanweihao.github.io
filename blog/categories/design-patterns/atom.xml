<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Design Patterns | benjamin.tan]]></title>
  <link href="http://benjamintanweihao.github.io/blog/categories/design-patterns/atom.xml" rel="self"/>
  <link href="http://benjamintanweihao.github.io/"/>
  <updated>2013-06-08T22:36:39+08:00</updated>
  <id>http://benjamintanweihao.github.io/</id>
  <author>
    <name><![CDATA[Benjamin Tan]]></name>
    <email><![CDATA[benjamintanweihao AT gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Pattern #3 - Observer]]></title>
    <link href="http://benjamintanweihao.github.io/blog/2013/06/06/pattern-number-3-observer/"/>
    <updated>2013-06-06T22:58:00+08:00</updated>
    <id>http://benjamintanweihao.github.io/blog/2013/06/06/pattern-number-3-observer</id>
    <content type="html"><![CDATA[<p>Today, we&rsquo;ll look at one of the most useful patterns &ndash; The <strong>Observer</strong>.</p>

<p>This is what the GoF have to say about the Observer:</p>

<blockquote><p>Define a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically.</p></blockquote>

<p>We shall use the UML diagram to help us understand the pattern:</p>

<p><img src="/images/observer_uml.png">
(Credits: <a href="http://www.wikipedia.com/">http://www.wikipedia.com/</a>)</p>

<h3>The Subject</h3>

<p>We begin with the <strong>Subject</strong>. This is the object that we are interested in when it&rsquo;s state changes.</p>

<p><strong>Subject</strong> has an <code>observerCollection</code> field. As it&rsquo;s name suggests, this is typically a list collection (Array, List, etc). This stores a collection of <strong>Observer</strong>s which we will take a look next.</p>

<h3>The Observer</h3>

<p>The parent <strong>Observer</strong> defines one method &ndash; <code>notify()</code>. Classes which inherit the <strong>Observer</strong> (<code>ConcreteObserverA</code>, <code>ConcreteObserverB</code>) are expected to implement <code>notify()</code>.</p>

<h3>PUB/SUB</h3>

<p>This pattern is also known as the Publisher/Subscriber, or PUB/SUB for short.</p>

<p><img src="/images/pubsub.jpeg"></p>

<p>Let&rsquo;s find out why:</p>

<h3>Subscribing and Unsubscribing</h3>

<p>If the <code>Subject</code> needs to inform certain <code>Observer</code>s, then it calls the <code>registerObserver(observer)</code>. Similarly, once it can choose to remove any <code>Observer</code> by calling <code>unregisterObserver(observer)</code>.</p>

<h3>Publishing</h3>

<p>Here&rsquo;s where the fun starts. Let&rsquo;s see some code that implements the UML diagram above:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>The Subject </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Subject</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;@observers = []</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">notify_observers</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;@observers.each do |observer|</span>
</span><span class='line'><span class="sr">  observer.notify</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">register_observer</span><span class="p">(</span><span class="n">observer</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;@observers &amp;lt;&amp;lt; observer</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">unregister_observer</span><span class="p">(</span><span class="n">observer</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;@observers.delete(observer)</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Then the Observer:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>The Observers </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ObserverOne</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">notify</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;puts &quot;Observer 1 called.&quot;</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">ObserverTwo</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">notify</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;puts &quot;Observer 2 called.&quot;</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Then we add our observers:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;subject = Subject.new</span>
</span><span class='line'><span class="sr">subject.register_observer(ObserverOne.new)</span>
</span><span class='line'><span class="sr">subject.register_observer(ObserverTwo.new)&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now, whenever <code>Subject</code>&rsquo;s state changes, it just has to call <code>notify_observers</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Subject</span>
</span><span class='line'>  <span class="c1"># …&lt;br/&gt;</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">change_variable</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;# …</span>
</span><span class='line'><span class="sr">notify_observers</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Key Takeaways</h3>

<p>The Observer pattern great for reducing the coupling between different components when these components need to be informed about changes.</p>

<p>By separating the <code>Subject</code> and the <code>Observer</code>, we have a clean separation of concerns.</p>

<h3>Examples of Observer in use</h3>

<p><a href="http://rubyonrails.org/">Ruby</a> has is very own <code>Observable</code> module, so there&rsquo;s really no need to implement one your own. See the <a href="http://www.ruby-doc.org/stdlib-2.0/libdoc/observer/rdoc/Observable.html">documentation</a>. Notice that the methods implemented are pretty similar.</p>

<p><a href="http://rubyonrails.org/">Rails</a> makes use of observers heavily. Here&rsquo;s a typical example:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">after_create</span> <span class="ss">:send_email</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def send_email&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">#send a welcome email</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Thanks for reading!</p>

<h3>References</h3>

<p>Olsen, R. (2008) Design patterns in Ruby. Upper Saddle River, NJ: Addison-Wesley, p.95-110.</p>

<p>Gamma, E. (1995) Design patterns. Reading, Mass.: Addison-Wesley, p.293-303.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pattern #1: Template Method]]></title>
    <link href="http://benjamintanweihao.github.io/blog/2013/05/29/pattern-number-1-template-method/"/>
    <updated>2013-05-29T10:04:00+08:00</updated>
    <id>http://benjamintanweihao.github.io/blog/2013/05/29/pattern-number-1-template-method</id>
    <content type="html"><![CDATA[<p>This is one of the simplest design patterns. The GoF book has the most concise description of the <strong>Template Method</strong>:</p>

<blockquote><p>Define the <em>skeleton of an algorithm</em> in an operation, deferring some steps to subclasses.</p>

<p>Template Method lets <em>subclasses redefine certain steps of an algorithm without changing the algorithms&rsquo;s structure</em>.</p></blockquote>

<p>First, notice the use of &ldquo;<strong>subclasses</strong>&rdquo; and it should be obvious that this pattern makes use of inheritance heavily.</p>

<p>Let&rsquo;s tease apart the description.</p>

<h3>Define the <em>skeleton of an algorithm</em> in an operation, deferring some steps to subclasses</h3>

<p>Chances are, if you&rsquo;re doing any amount of Java, you probably have used the template method.</p>

<p>Here, we are extending the <a href="http://docs.oracle.com/javase/6/docs/api/java/util/AbstractList.html">AbstractList</a> class. <code>AbstractList</code> already gives us most of the implementation to build a <code>List</code> that is supported by an array-like data store.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.util.AbstractList</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SuperAwesomeList</span> <span class="kd">extends</span> <span class="n">AbstractList</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="n">Object</span> <span class="nf">get</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">int</span> <span class="nf">size</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now, the programmer can use her creative genius to implement <code>get(i)</code> and <code>size()</code>.</p>

<h3>Template Method lets <em>subclasses redefine certain steps of an algorithm without changing the algorithms&rsquo;s structure</em>.</h3>

<p>Here&rsquo;s another flavor of the Template Method in Ruby:
<a href="http://mperham.github.io/sidekiq/">Sidekiq</a> is a message processor for Ruby.</p>

<p>It is mostly used for pushing long-running jobs into the background (e.g.: sending emails, complex calculations, etc.)</p>

<p>Here, we have <code>HardWorker</code>, who&rsquo;s sole purpose is to crawl Wikipedia. We would like to put this in the background. Happily, to create a background worker using Sidekiq is almost trivial:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">HardWorker</span>
</span><span class='line'>  <span class="kp">include</span> <span class="ss">Sidekiq</span><span class="p">:</span><span class="ss">:Worker</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def perform(url)&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">crawler</span> <span class="o">=</span> <span class="no">Crawler</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
</span><span class='line'><span class="n">crawler</span><span class="o">.</span><span class="n">crawl</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;Run our worker!&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="no">HardWorker</span><span class="o">.</span><span class="n">perform_async</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s2">&quot;http://www.wikipedia.com&quot;</span><span class="o">&gt;</span><span class="ss">http</span><span class="p">:</span><span class="sr">//</span><span class="n">www</span><span class="o">.</span><span class="n">wikipedia</span><span class="o">.</span><span class="n">com</span><span class="o">&lt;</span><span class="sr">/a&gt;&amp;rsquo;)&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The secret sauce is on line 2. Roughly, when you call <code>perform_async</code>, the <strong>job processor</strong> is notified, which then runs the <code>perform</code> method of the worker.</p>

<p>Here&rsquo;s the condensed code snippet of the job processor calling the <code>perform</code> method of the worker:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;Lots of code removed.&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="k">module</span> <span class="nn">Sidekiq</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Processor</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;def process</span>
</span><span class='line'><span class="sr">  ##########################</span>
</span><span class='line'><span class="sr">  # Lots of complicated code</span>
</span><span class='line'><span class="sr">  ##########################</span>
</span><span class='line'>
</span><span class='line'><span class="sr">  Sidekiq.server_middleware.invoke(worker, msg, queue) do</span>
</span><span class='line'><span class="sr">    worker.perform(msg) # &amp;lt;- Workers implement this anyway they like!</span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'>
</span><span class='line'><span class="sr">  ##########################</span>
</span><span class='line'><span class="sr">  # Even more Ruby magic …</span>
</span><span class='line'><span class="sr">  ##########################</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now would be a good time to introduce &hellip;</p>

<h3>The Hollywood Principle &ndash; Don&rsquo;t call us, we&rsquo;ll call you</h3>

<p><img src="/images/template_hollywood.png" title="&lsquo;image&rsquo; &lsquo;images&rsquo;" ></p>

<p>Look at the <code>process</code> method of <code>Sidekiq::Processor</code> again.</p>

<p>Every worker <em>must</em> include the <code>Sidekiq::Worker</code> module and <em>must</em> implement <code>perform</code> method.</p>

<p>The template method embodies the Hollywood principle nicely:</p>

<p><code>Sidekiq::Processor</code> <em>doesn&rsquo;t care</em> how any of the workers' <code>perform</code> method works &ndash; It just calls it.</p>

<p>Every <code>Sidekiq::Worker</code> class implements its own unique <code>perform</code> method. This allows for flexibility without messing with the main algorithm of the <code>process</code> method.</p>

<h3>Keypoints: When to use the Template Pattern?</h3>

<ul>
<li>you want to control the amount of subclassing (First example)</li>
<li>the behavior of your algorithm varies, and subclasses are required to provide their own implementation (Second Example)</li>
<li>you want only specific points where the algorithm should vary (Second Example)</li>
</ul>


<p>The next pattern I would like to cover is the <strong>Strategy Pattern</strong>, a close cousin of the Template pattern.</p>

<p>Thanks for reading!</p>

<h3>References</h3>

<p>Olsen, R. (2008) Design patterns in Ruby. Upper Saddle River, NJ: Addison-Wesley, p.59-76.</p>

<p>Gamma, E. (1995) Design patterns. Reading, Mass.: Addison-Wesley, p.325-330.</p>
]]></content>
  </entry>
  
</feed>
