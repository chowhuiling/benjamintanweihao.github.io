<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Elixir | benjamin.tan]]></title>
  <link href="http://benjamintanweihao.github.io/blog/categories/elixir/atom.xml" rel="self"/>
  <link href="http://benjamintanweihao.github.io/"/>
  <updated>2013-06-15T15:27:39+08:00</updated>
  <id>http://benjamintanweihao.github.io/</id>
  <author>
    <name><![CDATA[Benjamin Tan]]></name>
    <email><![CDATA[benjamintanweihao AT gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Elixir for the Lazy, Impatient and Busy: Part 1 |> Lists and Recursion]]></title>
    <link href="http://benjamintanweihao.github.io/blog/2013/06/13/elixir-for-the-lazy-impatient-and-busy-lists-and-recursion/"/>
    <updated>2013-06-13T23:39:00+08:00</updated>
    <id>http://benjamintanweihao.github.io/blog/2013/06/13/elixir-for-the-lazy-impatient-and-busy-lists-and-recursion</id>
    <content type="html"><![CDATA[<p>Welcome to the first of (hopefully) many series of <em>Elixir for the Lazy, Impatient and Busy</em>!</p>

<p>As you might know, I&rsquo;m <a href="/blog/2013/06/08/why-my-next-programming-language-is-elixir/">adopting Elixir as my next language</a>. The following series of blog posts are going to cover the interesting aspects of Elixir as I learn about it.</p>

<h2>You are Lazy, Impatient and Busy</h2>

<blockquote><p>The three chief virtues of a programmer are: Laziness, Impatience and Hubris.
&ndash; Larry Wall</p></blockquote>

<p>Before I begin, I&rsquo;m going to assume the following:</p>

<p>1) You don&rsquo;t have a lot of time on your hands. You don&rsquo;t want to buy a book just to see what Elixir looks like, but yet you are still interested to learn about this awesome programming language.</p>

<p>2) You know how to code.</p>

<p>3) You know how to look up <a href="http://elixir-lang.org/docs/stable/">documentation</a> on your own and how to <a href="http://elixir-lang.org/getting_started/1.html">install</a> Elixir.</p>

<p>There is probably going to be a lot of hand-waving, but I&rsquo;m going to assume that you can probably infer from the context, and make parallels with whatever programming language you are comfortable with.</p>

<p>In cases where there are glaring differences, I would highlight it.</p>

<p>I would encourage you to try out the examples and if you have any better implementations than the one I&rsquo;ve shown, please share them via the comments!</p>

<p>That said, let&rsquo;s dive right into Lists and Recursion.</p>

<hr />

<p>I&rsquo;ll run through a couple of functions selected from Elixir&rsquo;s <a href="http://elixir-lang.org/docs/stable/Enum.html">Enum API</a>, and we shall implement our &ldquo;poor man&rsquo;s&rdquo; version of the following (This means that you will not want to use this for your production code, but I believe it provides enough learning value to get your brain juice flowing.):</p>

<ol>
<li><code>empty?/1</code></li>
<li><code>count/1</code></li>
<li><code>first/1</code></li>
</ol>


<p>Notice the <code>/1</code>? That&rsquo;s the <em>arity</em> of the function &ndash; The number of parameters the function will take.</p>

<p>Today, the examples that we go through will lead up to implementing our very own <code>flatten/1</code> function. Here&rsquo;s how it would work:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="no">List</span><span class="o">.</span><span class="n">flatten</span> <span class="p">[</span><span class="m">1</span><span class="p">,</span> <span class="p">[</span><span class="ss">:a</span><span class="p">,</span> <span class="m">3</span><span class="p">],</span> <span class="p">[[</span><span class="m">4</span><span class="p">],</span> <span class="ss">:b</span><span class="p">]]</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="ss">Returns:</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">[</span><span class="m">1</span><span class="p">,</span><span class="ss">:a</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="m">4</span><span class="p">,</span><span class="ss">:b</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Couple of things to notice:</p>

<ol>
<li>Lists can contain more lists &ndash; List-ception.</li>
<li>List need not be homogeneous. <code>:a</code> are atoms, something like symbols in Ruby.</li>
</ol>


<h2>Pattern matching</h2>

<p>Elixir has some very sweet pattern matching capabilities. The most important thing to know about lists is probably this:</p>

<blockquote><p>A non-empty list consists of a head and a tail. The tail is also a list.</p></blockquote>

<p><img src="/images/listmonster.png">
(Credits: <a href="http://learnyouahaskell.com/">http://learnyouahaskell.com/</a>)</p>

<h2>Implementing empty?</h2>

<p><code>empty?/1</code> returns true if a list is empty, false otherwise:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="k">defmodule</span> <span class="no">MyList</span> <span class="k">do</span>
</span><span class='line'><span class="k">  def</span> <span class="n">empty?</span><span class="p">([]),</span> <span class="k">do</span><span class="p">:</span> <span class="no">true</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">empty?</span><span class="p">(</span><span class="n">list</span><span class="p">)</span> <span class="ow">when</span> <span class="n">is_list</span><span class="p">(</span><span class="n">list</span><span class="p">)</span> <span class="k">do</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="err">&gt;</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="no">false</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="err">&gt;</span><span class="o">&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="no">IO</span><span class="o">.</span><span class="n">puts</span> <span class="no">MyList</span><span class="o">.</span><span class="n">empty?</span> <span class="p">[</span><span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">3</span><span class="p">]</span> <span class="c1"># Returns false</span>
</span><span class='line'><span class="no">IO</span><span class="o">.</span><span class="n">puts</span> <span class="no">MyList</span><span class="o">.</span><span class="n">empty?</span> <span class="p">[]</span>        <span class="c1"># Returns true</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Things to notice:</p>

<ol>
<li><p><code>defmodule</code> defines a module. Calling the function defined in the module would therefore be <code>IO.puts MyList.empty? [1, 2, 3]</code>.</p></li>
<li><p>There are 2 definitions of <code>empty?</code>. This is where the pattern matching comes in. A non-empty list like <code>[1, 2, 3]</code> will <em>fail to match</em> the first definition, but would match the second one. An empty list <code>[]</code> will match the first definition and its function body will execute.</p></li>
<li><p>There are 2 different ways to write the function body. One liners have <code>, do:</code>. The other flavor is the <code>do â€¦ end</code> block.</p></li>
<li><p><code>when</code> is a <strong>guard clause</strong>. Think of it like a conditional for now. In this example, we make use of <code>is_list(list)</code> to make sure that only lists are accepted as the parameter.</p></li>
</ol>


<p>So what happens if none of the parameters match?
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">iex</span><span class="p">(</span><span class="m">11</span><span class="p">)</span><span class="o">&gt;</span> <span class="no">MyList</span><span class="o">.</span><span class="n">empty?</span> <span class="ss">:you_mad_bro?</span>
</span><span class='line'><span class="o">**</span> <span class="p">(</span><span class="no">UndefinedFunctionError</span><span class="p">)</span> <span class="n">undefined</span> <span class="ss">function:</span> <span class="no">MyList</span><span class="o">.</span><span class="n">empty?</span><span class="o">/</span><span class="m">1</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="err">&gt;</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="no">MyList</span><span class="o">.</span><span class="n">empty?</span><span class="p">(</span><span class="ss">:you_mad_bro?</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="err">&gt;</span><span class="o">&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Elixir complains, because it cannot find a match.</p>

<h2>Implementing first/1</h2>

<p><code>first</code> gives us the first element of a (obviously) non-empty list.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="k">defmodule</span> <span class="no">MyList</span> <span class="k">do</span>
</span><span class='line'><span class="k">  def</span> <span class="n">first</span><span class="p">([</span> <span class="n">head</span> <span class="o">|</span> <span class="n">tail</span> <span class="p">]),</span> <span class="k">do</span><span class="p">:</span> <span class="n">head</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="no">IO</span><span class="o">.</span><span class="n">puts</span> <span class="no">MyList</span><span class="o">.</span><span class="n">first</span><span class="p">([</span> <span class="m">1</span> <span class="p">])</span>            <span class="c1"># Returns 1</span>
</span><span class='line'><span class="no">IO</span><span class="o">.</span><span class="n">puts</span> <span class="no">MyList</span><span class="o">.</span><span class="n">first</span><span class="p">([</span> <span class="m">3</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">5</span><span class="p">,</span> <span class="m">1</span><span class="p">])</span> <span class="c1"># Returns 3</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Why does it match <code>[1]</code>? <code>[1]</code> is made of the head <code>1</code>, and the empty list. Therefore, an alternative representation is <code>[ 1 | [] ]</code>.</p>

<p>Note: Notice that the variable <code>tail</code> is not used. In fact, Elixir will complain with <code>variable tail is unused</code>. Replace <code>tail</code> with <code>_tail</code> and we&rsquo;ll be good. This tells Elixir to ignore the variable.</p>

<h2>Implementing count/1</h2>

<p><code>count</code> gives us a peek into how recursion works in Elixir:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="k">defmodule</span> <span class="no">MyList</span> <span class="k">do</span>
</span><span class='line'><span class="k">  def</span> <span class="n">count</span><span class="p">([]),</span> <span class="k">do</span><span class="p">:</span> <span class="m">0</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">count</span><span class="p">([</span> <span class="n">head</span> <span class="o">|</span> <span class="n">tail</span> <span class="p">])</span> <span class="k">do</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="err">&gt;</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="m">1</span> <span class="o">+</span> <span class="n">count</span><span class="p">(</span><span class="n">tail</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="err">&gt;</span><span class="o">&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="no">IO</span><span class="o">.</span><span class="n">puts</span> <span class="no">MyList</span><span class="o">.</span><span class="n">count</span><span class="p">([])</span>
</span><span class='line'><span class="no">IO</span><span class="o">.</span><span class="n">puts</span> <span class="no">MyList</span><span class="o">.</span><span class="n">count</span><span class="p">([</span><span class="m">1</span><span class="p">])</span>
</span><span class='line'><span class="no">IO</span><span class="o">.</span><span class="n">puts</span> <span class="no">MyList</span><span class="o">.</span><span class="n">count</span><span class="p">([</span><span class="m">3</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">5</span><span class="p">,</span> <span class="m">1</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Here, we&rsquo;re making use of the pattern matching once again.</p>

<ol>
<li><code>[]</code> matches the first definition, and returns 0 immediately.</li>
<li>A non-empty list would match the second definition.</li>
</ol>


<p>Let&rsquo;s see how the <code>[ head | tail ]</code> helps us out by tracing the recursive steps:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="no">Call</span> <span class="n">count</span> <span class="p">[</span><span class="m">3</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">5</span><span class="p">,</span> <span class="m">1</span><span class="p">]:</span> <span class="n">head</span> <span class="o">=</span> <span class="m">3</span><span class="p">,</span> <span class="n">tail</span> <span class="o">=</span> <span class="p">[</span><span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">5</span><span class="p">,</span> <span class="m">1</span><span class="p">]</span>
</span><span class='line'><span class="err">âž¥</span> <span class="m">1</span> <span class="o">+</span> <span class="n">count</span> <span class="p">[</span><span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">5</span><span class="p">,</span> <span class="m">1</span><span class="p">]</span>
</span><span class='line'>  <span class="no">Call</span> <span class="n">count</span> <span class="p">[</span><span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">5</span><span class="p">,</span> <span class="m">1</span><span class="p">]:</span> <span class="n">head</span> <span class="o">=</span> <span class="m">1</span><span class="p">,</span> <span class="n">tail</span> <span class="o">=</span> <span class="p">[</span><span class="m">2</span><span class="p">,</span> <span class="m">5</span><span class="p">,</span> <span class="m">1</span><span class="p">]</span>
</span><span class='line'>  <span class="err">âž¥</span> <span class="m">1</span> <span class="o">+</span> <span class="m">1</span> <span class="o">+</span> <span class="n">count</span> <span class="p">[</span><span class="m">2</span><span class="p">,</span> <span class="m">5</span><span class="p">,</span> <span class="m">1</span><span class="p">]</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="err">&gt;</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="no">Call</span> <span class="n">count</span> <span class="p">[</span><span class="m">2</span><span class="p">,</span> <span class="m">5</span><span class="p">,</span> <span class="m">1</span><span class="p">]:</span> <span class="n">head</span> <span class="o">=</span> <span class="m">2</span><span class="p">,</span> <span class="n">tail</span> <span class="o">=</span> <span class="p">[</span><span class="m">5</span><span class="p">,</span> <span class="m">1</span><span class="p">]</span>
</span><span class='line'><span class="err">âž¥</span> <span class="m">1</span> <span class="o">+</span> <span class="m">1</span> <span class="o">+</span> <span class="m">1</span> <span class="o">+</span> <span class="n">count</span> <span class="p">[</span><span class="m">5</span><span class="p">,</span> <span class="m">1</span><span class="p">]</span>
</span><span class='line'>  <span class="no">Call</span> <span class="n">count</span> <span class="p">[</span><span class="m">5</span><span class="p">,</span> <span class="m">1</span><span class="p">]:</span> <span class="n">head</span> <span class="o">=</span> <span class="m">5</span><span class="p">,</span> <span class="n">tail</span> <span class="o">=</span> <span class="p">[</span><span class="m">1</span><span class="p">]</span>
</span><span class='line'>  <span class="err">âž¥</span> <span class="m">1</span> <span class="o">+</span> <span class="m">1</span> <span class="o">+</span> <span class="m">1</span> <span class="o">+</span> <span class="n">count</span> <span class="p">[</span><span class="m">5</span><span class="p">,</span> <span class="m">1</span><span class="p">]</span>
</span><span class='line'>    <span class="no">Call</span> <span class="n">count</span> <span class="p">[</span><span class="m">1</span><span class="p">]:</span> <span class="n">head</span> <span class="o">=</span> <span class="m">1</span><span class="p">,</span> <span class="n">tail</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="err">âž¥</span> <span class="m">1</span> <span class="o">+</span> <span class="m">1</span> <span class="o">+</span> <span class="m">1</span> <span class="o">+</span> <span class="m">1</span> <span class="o">+</span> <span class="n">count</span> <span class="p">[</span><span class="m">1</span><span class="p">]</span>
</span><span class='line'>      <span class="no">Call</span> <span class="n">count</span> <span class="p">[]:</span>
</span><span class='line'>      <span class="err">âž¥</span> <span class="m">1</span> <span class="o">+</span> <span class="m">1</span> <span class="o">+</span> <span class="m">1</span> <span class="o">+</span> <span class="m">1</span> <span class="o">+</span> <span class="m">1</span> <span class="o">+</span> <span class="n">count</span> <span class="p">[]</span>
</span><span class='line'>      <span class="err">âž¥</span> <span class="m">1</span> <span class="o">+</span> <span class="m">1</span> <span class="o">+</span> <span class="m">1</span> <span class="o">+</span> <span class="m">1</span> <span class="o">+</span> <span class="m">1</span> <span class="o">+</span> <span class="m">0</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="err">&gt;</span><span class="o">&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Now the fun begins: Implementing flatten/1</h2>

<p><code>flatten</code> should take a list of arbitrarily nested elements such that the resulting elements are all non-lists. The only other thing you&rsquo;ll need is the <code>++</code> operator, which concatenates 2 lists together.</p>

<p>Here&rsquo;s my implementation of <code>flatten/1</code>, which I&rsquo;ll readily admit took me quite a while to figure out:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="k">defmodule</span> <span class="no">MyList</span> <span class="k">do</span>
</span><span class='line'><span class="k">  def</span> <span class="n">flatten</span><span class="p">([]),</span> <span class="k">do</span><span class="p">:</span> <span class="p">[]</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="n">flatten</span><span class="p">([</span> <span class="n">head</span> <span class="o">|</span> <span class="n">tail</span> <span class="p">])</span> <span class="k">do</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="err">&gt;</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">flatten</span><span class="p">(</span><span class="n">head</span><span class="p">)</span> <span class="o">++</span> <span class="n">flatten</span><span class="p">(</span><span class="n">tail</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="err">&gt;</span><span class="o">&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="n">flatten</span><span class="p">(</span><span class="n">head</span><span class="p">),</span> <span class="k">do</span><span class="p">:</span> <span class="p">[</span> <span class="n">head</span> <span class="p">]</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="no">IO</span><span class="o">.</span><span class="n">inspect</span> <span class="no">MyList</span><span class="o">.</span><span class="n">flatten</span><span class="p">([</span> <span class="p">[</span><span class="m">1</span><span class="p">],</span> <span class="p">[</span> <span class="m">2</span><span class="p">,</span> <span class="p">[</span><span class="m">3</span><span class="p">]</span> <span class="p">]</span> <span class="p">,</span> <span class="p">[</span><span class="m">4</span><span class="p">]])</span> <span class="c1"># Returns [1,2,3,4]</span>
</span><span class='line'><span class="no">IO</span><span class="o">.</span><span class="n">inspect</span> <span class="no">MyList</span><span class="o">.</span><span class="n">flatten</span><span class="p">([</span> <span class="p">[],</span> <span class="p">[</span> <span class="p">[],</span> <span class="p">[</span><span class="m">3</span><span class="p">]</span> <span class="p">]</span> <span class="p">,</span> <span class="p">[</span><span class="m">4</span><span class="p">]])</span> <span class="c1"># Returns [3,4]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>See if you can reason this for yourself. :)</p>

<p>Thanks for reading!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why My Next Programming Language is Elixir]]></title>
    <link href="http://benjamintanweihao.github.io/blog/2013/06/08/why-my-next-programming-language-is-elixir/"/>
    <updated>2013-06-08T18:21:00+08:00</updated>
    <id>http://benjamintanweihao.github.io/blog/2013/06/08/why-my-next-programming-language-is-elixir</id>
    <content type="html"><![CDATA[<p><img class="left" src="/images/elixir-logo.png"></p>

<p><a href="http://elixir-lang.org/">Elixir</a> is a functional meta-programming aware language built on top of the <a href="http://www.erlang.org/">Erlang</a> VM created by JosÃ© Valim.</p>

<p>For those who don&rsquo;t know JosÃ©, he&rsquo;s from Rails core, founder of <a href="http://plataformatec.com.br/">Plataformatec</a> and author of <a href="http://pragprog.com/book/jvrails2/crafting-rails-4-applications">Crafting Rails 4 Applications</a>.</p>

<p>When I first heard of Elixir, I didn&rsquo;t give much thought to it. During that time, I was trying to wrap my feeble head around <a href="http://clojure.org/">Clojure</a>. Then all of a sudden, I noticed a flurry of activity surrounding this up and coming programming language:</p>

<p><a href="https://peepcode.com/pages/upcoming">PeepCode</a> announced that they were filming an episode with JosÃ©.</p>

<p><a href="http://oreilly.com/">O'reilly</a> were going to publish an upcoming book and The Pragmatic Bookshelf had just published <a href="http://pragprog.com/book/elixir/programming-elixir">Programming Elixir</a> by Dave Thomas.</p>

<p>Then, there was a blog <a href="http://joearms.github.io/2013/05/31/a-week-with-elixir.html">post</a> by Joe Armstrong, inventor of Erlang, who wrote about his 1-week experience with Elixir. (He is pretty excited about it.)</p>

<h2>Watching the Alpha Geeks</h2>

<p>Tim O'Reilly has been credited for the above phrase through this <a href="http://www.linuxdevcenter.com/pub/a/mac/2002/05/14/oreilly_wwdc_keynote.html">talk</a>. In it, he mentions that a lot of ideas about what books to publish came from observing other hackers and &ldquo;alpha geeks&rdquo;:</p>

<blockquote><p>This is how we get most of our good ideas at O'Reilly. We look for people who appear to be doing magic, and ask them how they do it.</p>

<p>There are always people in any field who are the most clued in to the deep trends, who seem to be playing with all the coolest stuff, and seem to have their finger in everything before most people even know about it.</p></blockquote>

<p>Joe, JosÃ© and Dave certain qualify as &ldquo;alpha geeks&rdquo;, and their interest/investment in Elixir is definitely noteworthy.</p>

<h2>Elixir |> The Love-child of Ruby and Erlang |> Accessible Concurrency</h2>

<p>Elixir definitely has some Ruby feel to it. Here&rsquo;s some code to whet your appetite:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="p">(</span><span class="m">1</span><span class="o">..</span><span class="m">10</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="n">map</span><span class="p">(</span><span class="err">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="m">1</span><span class="o">*</span><span class="err">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="m">1</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="n">filter</span><span class="p">(</span><span class="k">fn</span> <span class="n">x</span> <span class="err">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="n">rem</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="m">2</span><span class="p">)</span> <span class="o">==</span> <span class="m">0</span> <span class="k">end</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>returns <code>[4,16,36,64,100]</code>.</p>

<p>The above code illustrates one of the coolest features yet I&rsquo;ve seen in a programming language: The <code>|&gt;</code> operator. This operator acts very much like the <code>|</code> operator in Unix shells.</p>

<p>Briefly, here is what the code does:</p>

<ol>
<li><code>(1..10)</code> specifies a range from 1 to 10.</li>
<li>This range is fed into the <code>map</code> function.</li>
<li><code>map(&amp;1*&amp;1)</code> is syntactic sugar for: <code>map(fn x -&gt; x * x end)</code>.</li>
<li>The result (<code>[1,4,9,16,25,36,49,64,81,100]</code>) then is fed yet again into the <code>filter</code> function, which only keeps even numbers.</li>
</ol>


<h2>Learning Concurrency: Not Optional Anymore</h2>

<p>Concurrency is getting more and more important &ndash; Hence the sudden excitement over learning all these functional programming languages.</p>

<p>Yes, I could do concurrency in Ruby. There&rsquo;s <a href="https://github.com/celluloid/celluloid">Celluloid</a> for example. But, concurrency isn&rsquo;t something built into Ruby&rsquo;s DNA.</p>

<p>While no one raves about Erlang&rsquo;s syntax, there is little doubt that Erlang can handle concurrency remarkably well. With Elixir, we can have the best of both worlds!</p>

<p>That is yet another reason why I am super excited about Elixir &ndash; Having a pretty syntax wrapped around the powerful Erlang VM seems to be an irresistible combination.</p>

<h2>Learning and Writing about Elixir</h2>

<p><a href="http://pragprog.com/book/elixir/programming-elixir"><img src="/images/elixir-book.jpg"></a></p>

<p>I bought the ebook the moment it was released. So far, I&rsquo;m enjoying the book very much, and especially looking forward to the part where concurrency is covered.</p>

<p>I plan to cover aspects of the Elixir language on this blog in the very near future.</p>

<p>Thanks for reading!</p>
]]></content>
  </entry>
  
</feed>
