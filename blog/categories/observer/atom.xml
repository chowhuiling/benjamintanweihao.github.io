<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Observer | benjamin.tan]]></title>
  <link href="http://benjamintanweihao.github.io/blog/categories/observer/atom.xml" rel="self"/>
  <link href="http://benjamintanweihao.github.io/"/>
  <updated>2013-06-12T01:36:55+08:00</updated>
  <id>http://benjamintanweihao.github.io/</id>
  <author>
    <name><![CDATA[Benjamin Tan]]></name>
    <email><![CDATA[benjamintanweihao AT gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Pattern #3 - Observer]]></title>
    <link href="http://benjamintanweihao.github.io/blog/2013/06/06/pattern-number-3-observer/"/>
    <updated>2013-06-06T22:58:00+08:00</updated>
    <id>http://benjamintanweihao.github.io/blog/2013/06/06/pattern-number-3-observer</id>
    <content type="html"><![CDATA[<p>Today, we&rsquo;ll look at one of the most useful patterns &ndash; The <strong>Observer</strong>.</p>

<p>This is what the GoF have to say about the Observer:</p>

<blockquote><p>Define a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically.</p></blockquote>

<p>We shall use the UML diagram to help us understand the pattern:</p>

<p><img src="/images/observer_uml.png">
(Credits: <a href="http://www.wikipedia.com/">http://www.wikipedia.com/</a>)</p>

<h3>The Subject</h3>

<p>We begin with the <strong>Subject</strong>. This is the object that we are interested in when it&rsquo;s state changes.</p>

<p><strong>Subject</strong> has an <code>observerCollection</code> field. As it&rsquo;s name suggests, this is typically a list collection (Array, List, etc). This stores a collection of <strong>Observer</strong>s which we will take a look next.</p>

<h3>The Observer</h3>

<p>The parent <strong>Observer</strong> defines one method &ndash; <code>notify()</code>. Classes which inherit the <strong>Observer</strong> (<code>ConcreteObserverA</code>, <code>ConcreteObserverB</code>) are expected to implement <code>notify()</code>.</p>

<h3>PUB/SUB</h3>

<p>This pattern is also known as the Publisher/Subscriber, or PUB/SUB for short.</p>

<p><img src="/images/pubsub.jpeg"></p>

<p>Let&rsquo;s find out why:</p>

<h3>Subscribing and Unsubscribing</h3>

<p>If the <code>Subject</code> needs to inform certain <code>Observer</code>s, then it calls the <code>registerObserver(observer)</code>. Similarly, once it can choose to remove any <code>Observer</code> by calling <code>unregisterObserver(observer)</code>.</p>

<h3>Publishing</h3>

<p>Here&rsquo;s where the fun starts. Let&rsquo;s see some code that implements the UML diagram above:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>The Subject </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Subject</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;@observers = []</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">notify_observers</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;@observers.each do |observer|</span>
</span><span class='line'><span class="sr">  observer.notify</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">register_observer</span><span class="p">(</span><span class="n">observer</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;@observers &amp;lt;&amp;lt; observer</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">unregister_observer</span><span class="p">(</span><span class="n">observer</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;@observers.delete(observer)</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Then the Observer:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>The Observers </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ObserverOne</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">notify</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;puts &quot;Observer 1 called.&quot;</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">ObserverTwo</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">notify</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;puts &quot;Observer 2 called.&quot;</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Then we add our observers:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;subject = Subject.new</span>
</span><span class='line'><span class="sr">subject.register_observer(ObserverOne.new)</span>
</span><span class='line'><span class="sr">subject.register_observer(ObserverTwo.new)&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now, whenever <code>Subject</code>&rsquo;s state changes, it just has to call <code>notify_observers</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Subject</span>
</span><span class='line'>  <span class="c1"># …&lt;br/&gt;</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">change_variable</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;# …</span>
</span><span class='line'><span class="sr">notify_observers</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Key Takeaways</h3>

<p>The Observer pattern great for reducing the coupling between different components when these components need to be informed about changes.</p>

<p>By separating the <code>Subject</code> and the <code>Observer</code>, we have a clean separation of concerns.</p>

<h3>Examples of Observer in use</h3>

<p><a href="http://rubyonrails.org/">Ruby</a> has is very own <code>Observable</code> module, so there&rsquo;s really no need to implement one your own. See the <a href="http://www.ruby-doc.org/stdlib-2.0/libdoc/observer/rdoc/Observable.html">documentation</a>. Notice that the methods implemented are pretty similar.</p>

<p><a href="http://rubyonrails.org/">Rails</a> makes use of observers heavily. Here&rsquo;s a typical example:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">after_create</span> <span class="ss">:send_email</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def send_email&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">#send a welcome email</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Thanks for reading!</p>

<h3>References</h3>

<p>Olsen, R. (2008) Design patterns in Ruby. Upper Saddle River, NJ: Addison-Wesley, p.95-110.</p>

<p>Gamma, E. (1995) Design patterns. Reading, Mass.: Addison-Wesley, p.293-303.</p>
]]></content>
  </entry>
  
</feed>
